{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js!D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolPointer.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolPointer.vue","mtime":1555946085790},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\GitHub\\\\Vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport paper from 'paper';\nimport Tool from '../Tool.vue';\nimport { mapMutations, mapState } from 'vuex';\nimport { bus } from '@/main.js';\nexport default {\n  name: 'ToolPointer',\n  data: function data() {\n    return {\n      selected: null\n    };\n  },\n  computed: _objectSpread({}, mapState(['ACTIVE', 'TOOLPOINTER', 'SELECTED'])),\n  components: {\n    Tool: Tool\n  },\n  methods: _objectSpread({}, mapMutations(['SET_ACTIVE', 'ADD_SHAPE', 'CLEAR_SELECT']), {\n    setActive: function setActive() {\n      this.SET_ACTIVE(\"pointer\");\n      this.TOOLPOINTER.activate();\n\n      if (this.SELECTED.length > 0) {\n        this.selected = this.SELECTED[this.SELECTED.length - 1];\n        this.CLEAR_SELECT();\n        this.selected.fullySelected = true;\n        this.selected.selected = true;\n      }\n    }\n  }),\n  mounted: function mounted() {\n    var _this = this;\n\n    var handle;\n    bus.$on(\"deactivate-pointer\", function () {\n      if (_this.selected) {\n        _this.selected.fullySelected = false;\n      }\n    });\n\n    this.TOOLPOINTER.onMouseDown = function (e) {\n      handle = null;\n\n      if (e.item) {\n        if (e.item.className == 'Path' && e.item.fullySelected) {\n          var path = e.item;\n          var hitResult = path.hitTest(e.point, {\n            handles: true\n          });\n\n          if (hitResult) {\n            if (hitResult.type == 'handle-in') {\n              handle = hitResult.segment.handleIn;\n            } else {\n              handle = hitResult.segment.handleOut;\n            }\n          }\n        }\n      }\n    };\n\n    this.TOOLPOINTER.onMouseMove = function (e) {\n      if (handle) {\n        handle.x = e.point.x;\n        handle.y = e.point.y;\n      }\n    };\n  }\n};",{"version":3,"sources":["ToolPointer.vue"],"names":[],"mappings":";;;;;;;;;AASA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA,MAAA,aAAA;AACA,SAAA,YAAA,EAAA,QAAA,QAAA,MAAA;AACA,SAAA,GAAA,QAAA,WAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,QAAA,EAAA;AADA,KAAA;AAGA,GANA;AAOA,EAAA,QAAA,oBACA,QAAA,CAAA,CACA,QADA,EAEA,aAFA,EAGA,UAHA,CAAA,CADA,CAPA;AAcA,EAAA,UAAA,EAAA;AACA,IAAA,IAAA,EAAA;AADA,GAdA;AAiBA,EAAA,OAAA,oBACA,YAAA,CAAA,CACA,YADA,EAEA,WAFA,EAGA,cAHA,CAAA,CADA;AAMA,IAAA,SAAA,EAAA,qBAAA;AACA,WAAA,UAAA,CAAA,SAAA;AAEA,WAAA,WAAA,CAAA,QAAA;;AACA,UAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,QAAA,GAAA,KAAA,QAAA,CAAA,KAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AAEA,aAAA,YAAA;AACA,aAAA,QAAA,CAAA,aAAA,GAAA,IAAA;AACA,aAAA,QAAA,CAAA,QAAA,GAAA,IAAA;AACA;AACA;AAjBA,IAjBA;AAoCA,EAAA,OAAA,EAAA,mBAAA;AAAA;;AACA,QAAA,MAAA;AAEA,IAAA,GAAA,CAAA,GAAA,CAAA,oBAAA,EAAA,YAAA;AACA,UAAA,KAAA,CAAA,QAAA,EAAA;AACA,QAAA,KAAA,CAAA,QAAA,CAAA,aAAA,GAAA,KAAA;AACA;AACA,KAJA;;AAMA,SAAA,WAAA,CAAA,WAAA,GAAA,UAAA,CAAA,EAAA;AACA,MAAA,MAAA,GAAA,IAAA;;AACA,UAAA,CAAA,CAAA,IAAA,EAAA;AACA,YAAA,CAAA,CAAA,IAAA,CAAA,SAAA,IAAA,MAAA,IAAA,CAAA,CAAA,IAAA,CAAA,aAAA,EAAA;AACA,cAAA,IAAA,GAAA,CAAA,CAAA,IAAA;AACA,cAAA,SAAA,GAAA,IAAA,CAAA,OAAA,CAAA,CAAA,CAAA,KAAA,EAAA;AAAA,YAAA,OAAA,EAAA;AAAA,WAAA,CAAA;;AACA,cAAA,SAAA,EAAA;AACA,gBAAA,SAAA,CAAA,IAAA,IAAA,WAAA,EAAA;AACA,cAAA,MAAA,GAAA,SAAA,CAAA,OAAA,CAAA,QAAA;AACA,aAFA,MAGA;AACA,cAAA,MAAA,GAAA,SAAA,CAAA,OAAA,CAAA,SAAA;AACA;AACA;AACA;AACA;AACA,KAhBA;;AAkBA,SAAA,WAAA,CAAA,WAAA,GAAA,UAAA,CAAA,EAAA;AACA,UAAA,MAAA,EAAA;AACA,QAAA,MAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA;AACA,QAAA,MAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA,KALA;AAMA;AArEA,CAAA","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-pointer.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\nimport { bus } from '@/main.js'\r\n\r\nexport default {\r\n  name: 'ToolPointer',\r\n  data: function() {\r\n    return {\r\n      selected: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'ACTIVE',\r\n      'TOOLPOINTER',\r\n      'SELECTED'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"pointer\")\r\n\r\n      this.TOOLPOINTER.activate();\r\n      if(this.SELECTED.length > 0) {\r\n        this.selected = this.SELECTED[this.SELECTED.length-1]\r\n\r\n        this.CLEAR_SELECT()\r\n        this.selected.fullySelected = true\r\n        this.selected.selected = true\r\n      }\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var handle;\r\n\r\n    bus.$on(\"deactivate-pointer\", () => {\r\n      if(this.selected) {\r\n        this.selected.fullySelected = false\r\n      }\r\n    })\r\n\r\n    this.TOOLPOINTER.onMouseDown = (e) => {\r\n      handle = null\r\n      if(e.item) {\r\n        if(e.item.className == 'Path' && e.item.fullySelected) {\r\n          var path = e.item\r\n          var hitResult = path.hitTest(e.point, { handles: true });\r\n          if(hitResult) {\r\n            if(hitResult.type == 'handle-in') {\r\n              handle = hitResult.segment.handleIn\r\n            }\r\n            else {\r\n              handle = hitResult.segment.handleOut\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.TOOLPOINTER.onMouseMove = (e) => {\r\n      if(handle) {\r\n        handle.x = e.point.x\r\n        handle.y = e.point.y\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"],"sourceRoot":"src/components/tools"}]}