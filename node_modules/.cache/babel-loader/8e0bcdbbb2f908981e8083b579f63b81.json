{"remainingRequest":"D:\\GitHub\\Vectory\\vectory\\node_modules\\babel-loader\\lib\\index.js!D:\\GitHub\\Vectory\\vectory\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GitHub\\Vectory\\vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\vectory\\src\\components\\tools\\ToolSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\vectory\\src\\components\\tools\\ToolSelect.vue","mtime":1554757000689},{"path":"D:\\GitHub\\Vectory\\vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _Object$keys from \"D:\\\\GitHub\\\\Vectory\\\\vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"D:\\\\GitHub\\\\Vectory\\\\vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport paper from 'paper';\nimport Tool from '../Tool.vue';\nimport { mapMutations, mapState } from 'vuex';\nimport { bus } from '@/main.js';\nexport default {\n  name: 'ToolSelect',\n  computed: _objectSpread({}, mapState(['ACTIVE', 'TOOLSELECT', 'OBJECTS'])),\n  components: {\n    Tool: Tool\n  },\n  methods: _objectSpread({}, mapMutations(['SET_ACTIVE', 'ADD_SHAPE', 'ADD_SELECT', 'CLEAR_SELECT']), {\n    setActive: function setActive() {\n      this.SET_ACTIVE(\"select\");\n      this.TOOLSELECT.activate();\n    }\n  }),\n  mounted: function mounted() {\n    var self = this;\n    var el = document.querySelector('#tool-select');\n    var hitOptions = {\n      segments: true,\n      stroke: true,\n      fill: true,\n      tolerance: 4\n    };\n    var hoverItem;\n    var selectionPath;\n    var transformRect = new Path();\n    var transformPoints = {\n      topLeft: null,\n      topMiddle: null,\n      topRight: null,\n      middleLeft: null,\n      middleRight: null,\n      bottomLeft: null,\n      bottomMiddle: null,\n      bottomRight: null // Updated through zoom\n\n    };\n    var transformBoxSize = 7 / view.zoom;\n    var transformBoxWidth = 2 / view.zoom;\n    var selectingPoint = null;\n    var selectRect = new Path();\n    var localSelect = [];\n    bus.$on('delete_selection', function () {\n      hideTransformBox();\n    });\n    bus.$on('zoom', function () {\n      // Keep the transform box's width constant over zoom\n      transformRect.strokeWidth = 0.5 / view.zoom;\n      transformBoxSize = 7 / view.zoom;\n      transformBoxWidth = 2 / view.zoom;\n      updateTransformBox();\n    });\n\n    function hideTransformBox() {\n      transformRect.remove();\n\n      _Object$keys(transformPoints).forEach(function (point, index) {\n        if (transformPoints[point]) {\n          transformPoints[point].remove();\n        }\n      });\n    }\n\n    var _lastTransformRect;\n\n    function drawTransformBox(rect) {\n      if (rect) {\n        _lastTransformRect = rect;\n      }\n\n      if (!_lastTransformRect) return; // Draw rect\n\n      transformRect = Path.Rectangle(_lastTransformRect);\n      transformRect.strokeColor = 'black';\n      transformRect.locked = true;\n      transformRect.strokeWidth = 0.5 / view.zoom; // Calculate the boxes\n\n      var topLeftRect = new Rectangle(_lastTransformRect.point.subtract(transformBoxSize / 2), transformBoxSize);\n      var topMiddleRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width / 2, _lastTransformRect.point.y).subtract(transformBoxSize / 2), transformBoxSize);\n      var topRightRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width, _lastTransformRect.point.y).subtract(transformBoxSize / 2), transformBoxSize);\n      var middleLeftRect = new Rectangle(new Point(_lastTransformRect.point.x, _lastTransformRect.point.y + _lastTransformRect.height / 2).subtract(transformBoxSize / 2), transformBoxSize);\n      var middleRightRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width, _lastTransformRect.point.y + _lastTransformRect.height / 2).subtract(transformBoxSize / 2), transformBoxSize);\n      var bottomLeftRect = new Rectangle(new Point(_lastTransformRect.point.x, _lastTransformRect.point.y + _lastTransformRect.height).subtract(transformBoxSize / 2), transformBoxSize);\n      var bottomMiddleRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width / 2, _lastTransformRect.point.y + _lastTransformRect.height).subtract(transformBoxSize / 2), transformBoxSize);\n      var bottomRightRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width, _lastTransformRect.point.y + _lastTransformRect.height).subtract(transformBoxSize / 2), transformBoxSize); // Assign the boxes\n\n      transformPoints.topLeft = Path.Rectangle(topLeftRect);\n      transformPoints.topMiddle = Path.Rectangle(topMiddleRect);\n      transformPoints.topRight = Path.Rectangle(topRightRect);\n      transformPoints.middleLeft = Path.Rectangle(middleLeftRect);\n      transformPoints.middleRight = Path.Rectangle(middleRightRect);\n      transformPoints.bottomLeft = Path.Rectangle(bottomLeftRect);\n      transformPoints.bottomMiddle = Path.Rectangle(bottomMiddleRect);\n      transformPoints.bottomRight = Path.Rectangle(bottomRightRect); // Set the box colors\n\n      _Object$keys(transformPoints).forEach(function (point, index) {\n        if (transformPoints[point]) {\n          transformPoints[point].locked = true;\n          transformPoints[point].strokeColor = 'blue';\n          transformPoints[point].fillColor = 'white';\n          transformPoints[point].strokeWidth = transformBoxWidth;\n        }\n      });\n    }\n\n    function updateTransformBox() {\n      hideTransformBox();\n      drawTransformBox();\n    }\n\n    self.TOOLSELECT.onMouseDown = function (e) {\n      localSelect = [];\n      hideTransformBox();\n      transformRect = new Path();\n\n      if (selectionPath) {\n        selectionPath.remove();\n\n        if (hoverItem && !hoverItem.selected) {\n          if (e.modifiers.shift) {\n            hoverItem.selected = true;\n            self.ADD_SELECT(hoverItem);\n          } else {\n            project.activeLayer.selected = false;\n            hoverItem.selected = true;\n            self.CLEAR_SELECT();\n            self.ADD_SELECT(hoverItem);\n          }\n        }\n      }\n\n      if (!e.item) {\n        project.activeLayer.selected = false;\n        self.CLEAR_SELECT();\n        selectingPoint = e.point;\n      }\n    };\n\n    self.TOOLSELECT.onMouseMove = function (e) {\n      if (hoverItem) {\n        hoverItem = null;\n        selectionPath.remove();\n      }\n\n      if (e.item) {\n        hoverItem = e.item;\n        selectionPath = hoverItem.clone();\n        selectionPath.strokeColor = '#33b5ff';\n        selectionPath.strokeWidth = 2 / paper.view.zoom;\n      }\n\n      if (selectingPoint) {\n        selectRect.remove();\n        selectRect = Path.Rectangle(selectingPoint, e.point);\n        selectRect.locked = true;\n        selectRect.dashArray = [4 / view.zoom, 3 / view.zoom];\n        selectRect.strokeColor = 'black';\n        selectRect.strokeWidth = 0.5 / view.zoom;\n\n        for (var i = 0; i < self.OBJECTS.length; i++) {\n          if (selectRect.intersects(self.OBJECTS[i])) {\n            if (!self.OBJECTS[i].selected) {\n              self.OBJECTS[i].selected = true;\n              localSelect.push(self.OBJECTS[i]);\n            }\n          } else {\n            var _selRect = new Rectangle(selectingPoint, e.point);\n\n            if (self.OBJECTS[i].isInside(_selRect)) {\n              if (!self.OBJECTS[i].selected) {\n                self.OBJECTS[i].selected = true;\n                localSelect.push(self.OBJECTS[i]);\n              }\n            } else {\n              self.OBJECTS[i].selected = false;\n              var index = localSelect.findIndex(function (x) {\n                return x === self.OBJECTS[i];\n              });\n\n              if (index != -1) {\n                localSelect.splice(index, 1);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    self.TOOLSELECT.onMouseUp = function (e) {\n      selectingPoint = null;\n      selectRect.remove();\n      var _temp = [];\n\n      for (var i = 0; i < localSelect.length; i++) {\n        _temp.push(localSelect[i].clone());\n      } // Make a compoundpath to get the bounds for the transform box\n\n\n      var _grouped = new CompoundPath({\n        children: _temp\n      });\n\n      drawTransformBox(_grouped.bounds);\n\n      _grouped.remove();\n\n      for (var i = 0; i < localSelect.length; i++) {\n        self.ADD_SELECT(localSelect[i]);\n      }\n    };\n  }\n};",{"version":3,"sources":["ToolSelect.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-select.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\nimport { bus } from '@/main.js'\r\n\r\nexport default {\r\n  name: 'ToolSelect',\r\n  computed: {\r\n    ...mapState([\r\n      'ACTIVE',\r\n      'TOOLSELECT',\r\n      'OBJECTS'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"select\")\r\n\r\n      this.TOOLSELECT.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var self = this;\r\n\r\n    var el = document.querySelector('#tool-select');\r\n\r\n    var hitOptions = {\r\n      segments: true,\r\n      stroke: true,\r\n      fill: true,\r\n      tolerance: 4\r\n    };\r\n\r\n    var hoverItem;\r\n    var selectionPath;\r\n\r\n    var transformRect = new Path();\r\n    var transformPoints = {\r\n      topLeft: null,\r\n      topMiddle: null,\r\n      topRight: null,\r\n\r\n      middleLeft: null,\r\n      middleRight: null,\r\n\r\n      bottomLeft: null,\r\n      bottomMiddle: null, \r\n      bottomRight: null\r\n    }\r\n    // Updated through zoom\r\n    var transformBoxSize = 7/view.zoom;\r\n    var transformBoxWidth = 2/view.zoom;\r\n\r\n    var selectingPoint = null;\r\n    var selectRect = new Path();\r\n\r\n    var localSelect = [];\r\n\r\n    bus.$on('delete_selection', () => {\r\n      hideTransformBox();\r\n    });\r\n\r\n    bus.$on('zoom', () => {\r\n      // Keep the transform box's width constant over zoom\r\n      transformRect.strokeWidth = 0.5/view.zoom;\r\n      transformBoxSize = 7/view.zoom;\r\n      transformBoxWidth = 2/view.zoom;\r\n\r\n      updateTransformBox();\r\n    });\r\n\r\n    function hideTransformBox() {\r\n      transformRect.remove();\r\n\r\n      Object.keys(transformPoints).forEach(function(point, index) {\r\n        if(transformPoints[point]) {\r\n          transformPoints[point].remove();\r\n        }\r\n      });\r\n    }\r\n\r\n    var _lastTransformRect;\r\n    function drawTransformBox(rect) {\r\n      if(rect) {\r\n        _lastTransformRect = rect;\r\n      }\r\n\r\n      if(!_lastTransformRect)\r\n        return;\r\n\r\n      // Draw rect\r\n      transformRect = Path.Rectangle(_lastTransformRect);\r\n      transformRect.strokeColor = 'black';\r\n      transformRect.locked = true;\r\n      transformRect.strokeWidth = 0.5/view.zoom;\r\n\r\n      // Calculate the boxes\r\n      var topLeftRect = new Rectangle(_lastTransformRect.point.subtract(transformBoxSize/2), transformBoxSize);\r\n      var topMiddleRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width/2, _lastTransformRect.point.y).subtract(transformBoxSize/2), transformBoxSize);\r\n      var topRightRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width, _lastTransformRect.point.y).subtract(transformBoxSize/2), transformBoxSize);\r\n\r\n      var middleLeftRect = new Rectangle(new Point(_lastTransformRect.point.x, _lastTransformRect.point.y + _lastTransformRect.height/2).subtract(transformBoxSize/2), transformBoxSize);\r\n      var middleRightRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width, _lastTransformRect.point.y + _lastTransformRect.height/2).subtract(transformBoxSize/2), transformBoxSize);\r\n      \r\n      var bottomLeftRect = new Rectangle(new Point(_lastTransformRect.point.x, _lastTransformRect.point.y + _lastTransformRect.height).subtract(transformBoxSize/2), transformBoxSize);\r\n      var bottomMiddleRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width/2, _lastTransformRect.point.y + _lastTransformRect.height).subtract(transformBoxSize/2), transformBoxSize);\r\n      var bottomRightRect = new Rectangle(new Point(_lastTransformRect.point.x + _lastTransformRect.width, _lastTransformRect.point.y + _lastTransformRect.height).subtract(transformBoxSize/2), transformBoxSize);\r\n\r\n\r\n      // Assign the boxes\r\n      transformPoints.topLeft = Path.Rectangle(topLeftRect);\r\n      transformPoints.topMiddle = Path.Rectangle(topMiddleRect);\r\n      transformPoints.topRight = Path.Rectangle(topRightRect);\r\n\r\n      transformPoints.middleLeft = Path.Rectangle(middleLeftRect);\r\n      transformPoints.middleRight = Path.Rectangle(middleRightRect);\r\n\r\n      transformPoints.bottomLeft = Path.Rectangle(bottomLeftRect);\r\n      transformPoints.bottomMiddle = Path.Rectangle(bottomMiddleRect);\r\n      transformPoints.bottomRight = Path.Rectangle(bottomRightRect);\r\n\r\n\r\n      // Set the box colors\r\n      Object.keys(transformPoints).forEach(function(point, index) {\r\n        if(transformPoints[point]) {\r\n          transformPoints[point].locked = true;\r\n          transformPoints[point].strokeColor = 'blue';\r\n          transformPoints[point].fillColor = 'white';\r\n          transformPoints[point].strokeWidth = transformBoxWidth;\r\n        }\r\n      });\r\n    }\r\n\r\n    function updateTransformBox() {\r\n      hideTransformBox();\r\n      drawTransformBox();\r\n    }\r\n\r\n    self.TOOLSELECT.onMouseDown = function(e) {\r\n      localSelect = [];\r\n      hideTransformBox();\r\n\r\n      transformRect = new Path();\r\n\r\n      if(selectionPath) {\r\n        selectionPath.remove();\r\n\r\n        if (hoverItem && !hoverItem.selected) {\r\n          if(e.modifiers.shift) {\r\n            hoverItem.selected = true;\r\n            self.ADD_SELECT(hoverItem);\r\n          }\r\n          else {\r\n            project.activeLayer.selected = false;\r\n            hoverItem.selected = true;\r\n            self.CLEAR_SELECT();\r\n            self.ADD_SELECT(hoverItem);\r\n          }\r\n        }\r\n      }\r\n      \r\n      if(!e.item) {\r\n        project.activeLayer.selected = false;\r\n        self.CLEAR_SELECT();\r\n        selectingPoint = e.point;\r\n      }\r\n    }\r\n\r\n    self.TOOLSELECT.onMouseMove = function(e) {\r\n      if (hoverItem) {\r\n        hoverItem = null;\r\n        selectionPath.remove();\r\n      }\r\n\r\n      if (e.item) {\r\n        hoverItem = e.item;\r\n        selectionPath = hoverItem.clone();\r\n        selectionPath.strokeColor = '#33b5ff';\r\n        selectionPath.strokeWidth = 2 / paper.view.zoom;\r\n      }\r\n\r\n      if(selectingPoint) {\r\n        selectRect.remove();\r\n        selectRect = Path.Rectangle(selectingPoint, e.point);\r\n        selectRect.locked = true;\r\n        selectRect.dashArray = [4/view.zoom, 3/view.zoom];\r\n        selectRect.strokeColor = 'black';\r\n        selectRect.strokeWidth = 0.5/view.zoom;\r\n\r\n        for(var i=0; i < self.OBJECTS.length; i++) {\r\n          if(selectRect.intersects(self.OBJECTS[i])) {\r\n            if(!self.OBJECTS[i].selected) {\r\n              self.OBJECTS[i].selected = true;\r\n              localSelect.push(self.OBJECTS[i]);\r\n            }\r\n          }\r\n          else {\r\n            var _selRect = new Rectangle(selectingPoint, e.point)\r\n            if(self.OBJECTS[i].isInside(_selRect)) {\r\n              if(!self.OBJECTS[i].selected) {\r\n                self.OBJECTS[i].selected = true;\r\n                localSelect.push(self.OBJECTS[i]);\r\n              }\r\n            }\r\n            else {\r\n              self.OBJECTS[i].selected = false;\r\n              var index = localSelect.findIndex(x => x === self.OBJECTS[i]);\r\n              if(index != -1) {\r\n                localSelect.splice(index, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    self.TOOLSELECT.onMouseUp = function(e) {\r\n      selectingPoint = null;\r\n      selectRect.remove();\r\n\r\n      var _temp = [];\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        _temp.push(localSelect[i].clone());\r\n      }\r\n\r\n      // Make a compoundpath to get the bounds for the transform box\r\n      var _grouped = new CompoundPath({\r\n        children: _temp\r\n      });\r\n\r\n      drawTransformBox(_grouped.bounds);\r\n      _grouped.remove();\r\n\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        self.ADD_SELECT(localSelect[i]);\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"],"sourceRoot":"src/components/tools"}]}