{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js!D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolSelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolSelect.vue","mtime":1555516831972},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"D:\\\\GitHub\\\\Vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.function.name\";\nimport _Object$keys from \"D:\\\\GitHub\\\\Vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _objectSpread from \"D:\\\\GitHub\\\\Vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport paper from 'paper';\nimport Tool from '../Tool.vue';\nimport { mapMutations, mapState } from 'vuex';\nimport { bus, Action } from '@/main.js';\nexport default {\n  name: 'ToolSelect',\n  computed: _objectSpread({}, mapState(['ACTIVE', 'TOOLSELECT', 'OBJECTS', 'SELECTED', 'ACTIONS'])),\n  components: {\n    Tool: Tool\n  },\n  methods: _objectSpread({}, mapMutations(['SET_ACTIVE', 'ADD_SHAPE', 'ADD_SELECT', 'CLEAR_SELECT', 'DELETE_SELECT', 'ADD_ACTION', 'UNDO']), {\n    setActive: function setActive() {\n      this.SET_ACTIVE(\"select\");\n      bus.$emit('activate-select');\n      this.TOOLSELECT.activate();\n    }\n  }),\n  mounted: function mounted() {\n    var _this = this;\n\n    var self = this;\n    var el = document.querySelector('#tool-select');\n    var hitOptions = {\n      segments: true,\n      stroke: true,\n      fill: true,\n      tolerance: 4\n    };\n    var mousePos; // Need this to create custom drag function\n\n    var mouseDown = false; // Path over which the mouse currently hovers\n\n    var hoverItem;\n    var hoverSelection = new Path();\n    hoverSelection.selectable = false; // Transform rectangle cache\n\n    var lastTransformRect; // The selection rectangle with transform points\n\n    var transformRect = new Path();\n    var transformPoints = {\n      topLeft: null,\n      topMiddle: null,\n      topRight: null,\n      leftCenter: null,\n      rightCenter: null,\n      bottomLeft: null,\n      bottomMiddle: null,\n      bottomRight: null // Updated through zoom\n\n    };\n    var transformBoxSize = 7 / view.zoom;\n    var transformBoxWidth = 2 / view.zoom; // Object with transform information\n\n    var transform = {\n      // Scaling\n      hover: false,\n      scaling: false,\n      pivot: null,\n      dir: '',\n      // topLeft, topMiddle, ...\n      scale_facH: null,\n      scale_facW: null,\n      // Dragging\n      hoverDrag: false,\n      dragging: false\n    }; // The relative distances used in scaling\n\n    var relH;\n    var relW;\n    var selectingPoint = null;\n    var selectRectPath = new Path(); // Local array containing the selected paths (self.SELECTED is the public array)\n\n    var localSelect = [];\n\n    var _lastMousePos;\n\n    var mouseDelta;\n    var flippedV = false;\n    var flippedH = false;\n    var lockScaleX = false;\n    var lockScaleY = false;\n    var point;\n    var selectRect; // Object containing the data before the scaling, useful for undo and shift/control modifiers\n\n    var initTransfData = {\n      height: null,\n      width: null,\n      pivot: null,\n      center: null\n    };\n    var action = {\n      move: new Action('move', {\n        startPos: null,\n        endPos: null,\n        paths: null\n      }),\n      scale: new Action('scale', {\n        paths: null,\n        pivot: null,\n        handle_init: null,\n        handle_end: null,\n        lockX: false,\n        lockY: false,\n        shift: false\n      }) // Remove the selection box with transform points\n\n    };\n\n    function hideTransformBox() {\n      transformRect.remove();\n\n      _Object$keys(transformPoints).forEach(function (point, index) {\n        if (transformPoints[point]) {\n          transformPoints[point].remove();\n        }\n      });\n    } // Draw selection box with transform points\n\n\n    function drawTransformBox(rect) {\n      if (rect) {\n        lastTransformRect = rect;\n      }\n\n      if (!lastTransformRect) return; // Draw rect\n\n      transformRect = Path.Rectangle(lastTransformRect);\n      transformRect.strokeColor = 'black';\n      transformRect.selectable = false;\n      transformRect.strokeWidth = 0.5 / view.zoom; // Calculate the positions\n\n      var topLeftPt = lastTransformRect.point.subtract(transformBoxSize / 2);\n      var topMiddlePt = new Point(lastTransformRect.point.x + lastTransformRect.width / 2, lastTransformRect.point.y).subtract(transformBoxSize / 2);\n      var topRightPt = new Point(lastTransformRect.point.x + lastTransformRect.width, lastTransformRect.point.y).subtract(transformBoxSize / 2);\n      var middleLeftPt = new Point(lastTransformRect.point.x, lastTransformRect.point.y + lastTransformRect.height / 2).subtract(transformBoxSize / 2);\n      var middleRightPt = new Point(lastTransformRect.point.x + lastTransformRect.width, lastTransformRect.point.y + lastTransformRect.height / 2).subtract(transformBoxSize / 2);\n      var bottomLeftPt = new Point(lastTransformRect.point.x, lastTransformRect.point.y + lastTransformRect.height).subtract(transformBoxSize / 2);\n      var bottomMiddlePt = new Point(lastTransformRect.point.x + lastTransformRect.width / 2, lastTransformRect.point.y + lastTransformRect.height).subtract(transformBoxSize / 2);\n      var bottomRightPt = new Point(lastTransformRect.point.x + lastTransformRect.width, lastTransformRect.point.y + lastTransformRect.height).subtract(transformBoxSize / 2); // Calculate the boxes\n\n      var topLeftRect = new Rectangle(topLeftPt, transformBoxSize);\n      var topMiddleRect = new Rectangle(topMiddlePt, transformBoxSize);\n      var topRightRect = new Rectangle(topRightPt, transformBoxSize);\n      var middleLeftRect = new Rectangle(middleLeftPt, transformBoxSize);\n      var middleRightRect = new Rectangle(middleRightPt, transformBoxSize);\n      var bottomLeftRect = new Rectangle(bottomLeftPt, transformBoxSize);\n      var bottomMiddleRect = new Rectangle(bottomMiddlePt, transformBoxSize);\n      var bottomRightRect = new Rectangle(bottomRightPt, transformBoxSize); // Assign the boxes\n\n      transformPoints.topLeft = Path.Rectangle(topLeftRect);\n      transformPoints.topMiddle = Path.Rectangle(topMiddleRect);\n      transformPoints.topRight = Path.Rectangle(topRightRect);\n      transformPoints.leftCenter = Path.Rectangle(middleLeftRect);\n      transformPoints.rightCenter = Path.Rectangle(middleRightRect);\n      transformPoints.bottomLeft = Path.Rectangle(bottomLeftRect);\n      transformPoints.bottomMiddle = Path.Rectangle(bottomMiddleRect);\n      transformPoints.bottomRight = Path.Rectangle(bottomRightRect); // Set type\n\n      _Object$keys(transformPoints).forEach(function (point, index) {\n        if (transformPoints[point]) {\n          transformPoints[point].type = 'transformPoint';\n        }\n      }); // Set cursor type\n\n\n      transformPoints.topLeft.cursorType = \"nw-resize\";\n      transformPoints.bottomRight.cursorType = \"nw-resize\";\n      transformPoints.topMiddle.cursorType = \"n-resize\";\n      transformPoints.bottomMiddle.cursorType = \"n-resize\";\n      transformPoints.topRight.cursorType = \"ne-resize\";\n      transformPoints.bottomLeft.cursorType = \"ne-resize\";\n      transformPoints.leftCenter.cursorType = \"e-resize\";\n      transformPoints.rightCenter.cursorType = \"e-resize\"; // Set names\n\n      transformPoints.topLeft.name = \"topLeft\";\n      transformPoints.topRight.name = \"topRight\";\n      transformPoints.topMiddle.name = \"topCenter\";\n      transformPoints.leftCenter.name = \"leftCenter\";\n      transformPoints.rightCenter.name = \"rightCenter\";\n      transformPoints.bottomLeft.name = \"bottomLeft\";\n      transformPoints.bottomMiddle.name = \"bottomCenter\";\n      transformPoints.bottomRight.name = \"bottomRight\"; // Set the box colors\n\n      _Object$keys(transformPoints).forEach(function (point, index) {\n        if (transformPoints[point]) {\n          transformPoints[point].selectable = false;\n          transformPoints[point].strokeColor = 'blue';\n          transformPoints[point].fillColor = 'white';\n          transformPoints[point].strokeWidth = transformBoxWidth;\n        }\n      });\n    } // Redraw the selection box with transform points\n\n\n    function updateTransformBox(bounds) {\n      hideTransformBox();\n\n      if (bounds) {\n        drawTransformBox(bounds);\n      } else {\n        drawTransformBox();\n      }\n    } // Return the opposite point on the transform box\n\n\n    function getOppositePoint(point, x, y, bounds) {\n      if (!point) {\n        alert(\"warning: 001\");\n        return;\n      }\n\n      var _point = point;\n      var opposite = bounds.center.add(bounds.center.subtract(point));\n\n      if (x) {\n        _point = new Point(opposite.x, _point.y);\n      }\n\n      if (y) {\n        _point = new Point(_point.x, opposite.y);\n      }\n\n      return _point;\n    } // Get the selection rectangle\n\n\n    function getBounds() {\n      if (localSelect.length == 0) return;\n      var _temp = [];\n\n      for (var i = 0; i < localSelect.length; i++) {\n        _temp.push(localSelect[i].clone());\n      } // Make a compoundpath to get the bounds for the transform box\n\n\n      var _grouped = new CompoundPath({\n        children: _temp\n      });\n\n      var rect = _grouped.bounds;\n\n      _grouped.remove();\n\n      return rect;\n    }\n\n    function RedrawTransformPoints() {\n      _Object$keys(transformPoints).forEach(function (point, index) {\n        transformPoints[point].position = transformRect.bounds[point];\n      });\n    } // While scaling check whether the selection should be flipped\n\n\n    function checkScaleFlip() {\n      if (relH > 0 && flippedV && !lockScaleY) {\n        transform.scale_facH = -transform.scale_facH;\n        flippedV = false;\n      } else if (relH < 0 && !flippedV && !lockScaleY) {\n        transform.scale_facH = -transform.scale_facH;\n        flippedV = true;\n      }\n\n      if (relW > 0 && !flippedH && !lockScaleX) {\n        transform.scale_facW = -transform.scale_facW;\n        flippedH = true;\n      }\n\n      if (relW < 0 && flippedH && !lockScaleX) {\n        transform.scale_facW = -transform.scale_facW;\n        flippedH = false;\n      }\n    } // Handle ctrl-key presses\n\n\n    function handleControlKey() {\n      var delta = initTransfData.center.subtract(transformRect.bounds.center);\n\n      for (var i = 0; i < localSelect.length; i++) {\n        localSelect[i].translate(delta);\n      }\n\n      transformRect.position = initTransfData.center;\n      point = new Point(initTransfData.center.x, initTransfData.center.y);\n      action.scale.data.pivot = point;\n      mouseDrag(mousePos);\n    } // - Mouse down -\n\n\n    self.TOOLSELECT.onMouseDown = function (e) {\n      mouseDown = true;\n      _lastMousePos = e.point;\n\n      if (transform.hoverDrag) {\n        action.move = new Action('move', {\n          paths: localSelect,\n          startPos: e.point,\n          endPos: null\n        });\n        transform.dragging = true;\n        return;\n      }\n\n      hideTransformBox();\n\n      if (transform.hover) {\n        var bounds = getBounds();\n        transform.scaling = true;\n        drawTransformBox();\n        transform.dir = e.item.name;\n        point = getOppositePoint(bounds[transform.dir], true, true, bounds); // Updating the backup data (for shift-scale and for undo)\n\n        initTransfData.width = bounds.width;\n        initTransfData.height = bounds.height;\n        initTransfData.pivot = new Point(point.x, point.y);\n        initTransfData.center = new Point(bounds.center.x, bounds.center.y);\n\n        switch (transform.dir) {\n          case 'bottomLeft':\n            flippedV = false;\n            flippedH = false;\n            lockScaleX = false;\n            lockScaleY = false;\n            break;\n\n          case 'topLeft':\n            flippedV = true;\n            flippedH = false;\n            lockScaleX = false;\n            lockScaleY = false;\n            break;\n\n          case 'bottomRight':\n            flippedV = false;\n            flippedH = true;\n            lockScaleX = false;\n            lockScaleY = false;\n            break;\n\n          case 'topRight':\n            flippedV = true;\n            flippedH = true;\n            lockScaleX = false;\n            lockScaleY = false;\n            break;\n\n          case 'bottomCenter':\n            flippedV = false;\n            flippedH = false;\n            lockScaleX = true;\n            lockScaleY = false;\n            break;\n\n          case 'topCenter':\n            flippedV = true;\n            flippedH = false;\n            lockScaleX = true;\n            lockScaleY = false;\n            break;\n\n          case 'leftCenter':\n            flippedV = false;\n            flippedH = false;\n            lockScaleX = false;\n            lockScaleY = true;\n            break;\n\n          case 'rightCenter':\n            flippedV = false;\n            flippedH = true;\n            lockScaleX = false;\n            lockScaleY = true;\n            break;\n        }\n\n        if (e.modifiers.control) {\n          handleControlKey();\n        }\n\n        action.scale = new Action('scale', {\n          paths: localSelect,\n          pivot: initTransfData.pivot,\n          lockX: lockScaleX,\n          lockY: lockScaleY,\n          handle_init: bounds[transform.dir],\n          handle_end: null,\n          shift: false\n        });\n        mouseDrag(e);\n        return;\n      }\n\n      transformRect = new Path(); // Mouse is not over a shape\n\n      if (!hoverItem) {\n        localSelect = [];\n      } // Mouse is over a shape\n\n\n      if (hoverSelection) {\n        hoverSelection.remove();\n\n        if (hoverItem && !hoverItem.selected && hoverItem.selectable) {\n          // Shift key is pressed\n          if (e.modifiers.shift) {\n            hoverItem.selected = true;\n            self.ADD_SELECT(hoverItem);\n            localSelect.push(hoverItem);\n          } // Shift key is not pressed\n          else {\n              project.activeLayer.selected = false;\n              hoverItem.selected = true;\n              localSelect = [];\n              self.CLEAR_SELECT();\n              console.log(\"added to selection\");\n              self.ADD_SELECT(hoverItem);\n              localSelect.push(hoverItem);\n            }\n\n          drawTransformBox(getBounds());\n        }\n      }\n\n      if (!e.item) {\n        console.log(\"selection was cleared\");\n        project.activeLayer.selected = false;\n        self.CLEAR_SELECT();\n        selectingPoint = e.point;\n      }\n    }; // - Mouse move -\n\n\n    self.TOOLSELECT.onMouseMove = function (e) {\n      mousePos = e;\n\n      if (mouseDown) {\n        mouseDrag(e);\n      }\n\n      document.body.style.cursor = \"default\";\n      transform.hover = false;\n\n      if (hoverItem) {\n        hoverItem = null;\n        hoverSelection.remove();\n      }\n\n      if (e.item) {\n        hoverItem = e.item;\n\n        if (hoverItem.selectable && !hoverItem.selected) {\n          hoverSelection = hoverItem.clone();\n          hoverSelection.strokeColor = '#33b5ff';\n          hoverSelection.strokeWidth = 2 / paper.view.zoom;\n          hoverSelection.selectable = false;\n        } else {\n          if (hoverItem.type == 'transformPoint') {\n            document.body.style.cursor = hoverItem.cursorType;\n            transform.hover = true;\n            transform.pivot = hoverItem.opposite;\n          }\n        }\n      }\n\n      if (selectingPoint && !transform.hover) {\n        selectRectPath.remove();\n        selectRect = new Rectangle(selectingPoint, e.point);\n        selectRectPath = Path.Rectangle(selectRect);\n        selectRectPath.selectable = false;\n        selectRectPath.dashArray = [4 / view.zoom, 3 / view.zoom];\n        selectRectPath.strokeColor = 'black';\n        selectRectPath.strokeWidth = 0.5 / view.zoom;\n\n        var _selRect = new Rectangle(selectingPoint, e.point);\n\n        for (var i = 0; i < self.OBJECTS.length; i++) {\n          // Selection rect intersects with the shape\n          if (selectRectPath.intersects(self.OBJECTS[i])) {\n            if (!self.OBJECTS[i].selected) {\n              self.OBJECTS[i].selected = true;\n              localSelect.push(self.OBJECTS[i]);\n            }\n          } // Selection rect doesn't intersect with shape\n          else {\n              // Shape is inside the selection rect\n              if (self.OBJECTS[i].isInside(_selRect)) {\n                if (!self.OBJECTS[i].selected) {\n                  self.OBJECTS[i].selected = true;\n                  localSelect.push(self.OBJECTS[i]);\n                }\n              } // Shape is not inside the selection rect\n              else {\n                  self.OBJECTS[i].selected = false;\n                  var index = localSelect.findIndex(function (x) {\n                    return x === self.OBJECTS[i];\n                  });\n\n                  if (index != -1) {\n                    localSelect.splice(index, 1);\n                  }\n                }\n            }\n        }\n      }\n\n      transform.hoverDrag = false;\n\n      if (self.SELECTED.length != 0) {\n        if (e.point.isInside(lastTransformRect) && !transform.hover && !transform.scaling) {\n          document.body.style.cursor = \"move\";\n          transform.hoverDrag = true;\n        }\n      }\n    }; // - Mouse up -\n\n\n    self.TOOLSELECT.onMouseUp = function (e) {\n      mouseDown = false;\n      var _return = false;\n      selectingPoint = null;\n      selectRectPath.remove();\n\n      if (localSelect.length == 0) {\n        return;\n      }\n\n      if (transform.scaling) {\n        lockScaleX = false;\n        lockScaleY = false;\n        var bounds = getBounds();\n        action.scale.data.handle_end = getOppositePoint(point, true, true, bounds);\n\n        if (e.modifiers.shift) {\n          action.scale.data.shift = true;\n        }\n\n        self.ADD_ACTION(action.scale);\n        transform.scaling = false;\n        _return = true;\n      }\n\n      if (transform.dragging) {\n        action.move.data.endPos = e.point;\n        console.log(\"added move action\");\n        self.ADD_ACTION(action.move);\n        transform.dragging = false;\n        _return = true;\n      } // Update transform box with new rectangle\n\n\n      hideTransformBox();\n      drawTransformBox(getBounds());\n\n      if (_return) {\n        return;\n      }\n\n      self.CLEAR_SELECT();\n\n      for (var i = 0; i < localSelect.length; i++) {\n        self.ADD_SELECT(localSelect[i]);\n      }\n    }; // - Mouse drag -\n\n\n    function mouseDrag(e) {\n      mouseDelta = e.point.subtract(_lastMousePos);\n      _lastMousePos = e.point;\n      var path = transformRect; // User is moving the selection\n\n      if (transform.dragging) {\n        for (var i = 0; i < localSelect.length; i++) {\n          localSelect[i].translate(mouseDelta);\n        }\n\n        transformRect.translate(mouseDelta);\n        lastTransformRect = transformRect.bounds;\n\n        _Object$keys(transformPoints).forEach(function (point, index) {\n          transformPoints[point].translate(mouseDelta);\n        });\n\n        return;\n      } // User is scaling the selection\n\n\n      if (transform.scaling) {\n        var bounds = transformRect.bounds;\n\n        if (!lockScaleY) {\n          relH = e.point.subtract(point).y;\n          transform.scale_facH = Math.abs(relH) / bounds.height;\n        } else {\n          transform.scale_facH = 1;\n        }\n\n        if (!lockScaleX) {\n          relW = e.point.subtract(point).x;\n          transform.scale_facW = Math.abs(relW) / bounds.width;\n        } else {\n          transform.scale_facW = 1;\n        }\n\n        if (Math.abs(transform.scale_facH) < 0.1 && !lockScaleY) {\n          return;\n        }\n\n        if (Math.abs(transform.scale_facW) < 0.1 && !lockScaleX) {\n          return;\n        }\n\n        if (!e.modifiers.shift) {\n          checkScaleFlip();\n        }\n\n        if (e.modifiers.shift) {\n          var min = Math.min(Math.abs(transform.scale_facH), Math.abs(transform.scale_facW));\n\n          if (lockScaleY) {\n            min = Math.abs(transform.scale_facW);\n          } else if (lockScaleX) {\n            min = Math.abs(transform.scale_facH);\n          }\n\n          transform.scale_facH = min;\n          transform.scale_facW = min;\n        }\n\n        if (e.modifiers.control) {\n          if (!lockScaleX) {\n            transform.scale_facW *= 2;\n          }\n\n          if (!lockScaleY) {\n            transform.scale_facH *= 2;\n          }\n        } // Scale all the selected items\n\n\n        for (var i = 0; i < localSelect.length; i++) {\n          localSelect[i].scale(transform.scale_facW, transform.scale_facH, point);\n        }\n\n        transformRect.scale(transform.scale_facW, transform.scale_facH, point); // Don't show the points while scaling\n\n        _Object$keys(transformPoints).forEach(function (point, index) {\n          transformPoints[point].remove();\n        });\n      }\n    } // - user is zooming -\n\n\n    bus.$on('zoom', function () {\n      // Keep the transform box's width constant over zoom\n      transformRect.strokeWidth = 0.5 / view.zoom;\n      transformBoxSize = 7 / view.zoom;\n      transformBoxWidth = 2 / view.zoom;\n\n      if (localSelect.length > 0) {\n        updateTransformBox();\n      }\n    }); // - Ctrl + Z -\n\n    bus.$on('undo', function () {\n      if (self.ACTIONS.length > 0) {\n        self.UNDO();\n        project.activeLayer.selected = false;\n        localSelect = _toConsumableArray(self.SELECTED);\n\n        for (var i = 0; i < localSelect.length; i++) {\n          localSelect[i].selected = true;\n        }\n\n        updateTransformBox(getBounds());\n      }\n    }); // - delete key pressed -\n\n    bus.$on('delete_selection', function () {\n      localSelect = [];\n      hideTransformBox();\n    }); // - shift key pressed -\n\n    bus.$on('shift', function () {\n      if (transform.scaling) {\n        var bounds = getBounds();\n        var facH_init = initTransfData.height / bounds.height;\n        var facW_init = initTransfData.width / bounds.width; // Scale the selection to its initial size\n\n        for (var i = 0; i < localSelect.length; i++) {\n          localSelect[i].scale(facW_init, facH_init, point);\n        } // Resize the transform rect as well\n\n\n        transformRect.scale(facW_init, facH_init, point);\n        var rel;\n\n        if (lockScaleX) {\n          rel = Math.abs(relH);\n        } else if (lockScaleY) {\n          rel = Math.abs(relW);\n        } else {\n          rel = Math.min(Math.abs(relH), Math.abs(relW));\n        }\n\n        var fac = rel / Math.min(initTransfData.width, initTransfData.height); // Resize the selection to the current size without deformation\n\n        for (var i = 0; i < localSelect.length; i++) {\n          localSelect[i].scale(fac, fac, point);\n        } // Resize transform rect as well\n\n\n        transformRect.scale(fac, fac, point);\n        mouseDrag(mousePos);\n      }\n    }); // - control key pressed -\n\n    bus.$on('control', function () {\n      if (transform.scaling) {\n        handleControlKey();\n      }\n    }); // - control key released -\n\n    bus.$on('control_up', function () {\n      if (transform.scaling) {\n        point = new Point(initTransfData.pivot.x, initTransfData.pivot.y);\n        action.scale.data.pivot = point;\n        relH = mousePos.point.subtract(point).y;\n        relW = mousePos.point.subtract(point).x;\n        var curDistPt;\n\n        if (relH >= 0 && relW >= 0) {\n          curDistPt = transformRect.bounds.topLeft;\n          flippedV = false;\n          flippedH = true;\n        } else if (relH >= 0 && relW < 0) {\n          curDistPt = transformRect.bounds.topRight;\n          flippedV = false;\n          flippedH = false;\n        } else if (relH < 0 && relW >= 0) {\n          curDistPt = transformRect.bounds.bottomLeft;\n          flippedV = true;\n          flippedH = true;\n        } else if (relH < 0 && relW < 0) {\n          curDistPt = transformRect.bounds.bottomRight;\n          flippedV = true;\n          flippedH = false;\n        }\n\n        var delta = initTransfData.pivot.subtract(curDistPt);\n\n        if (lockScaleX) {\n          delta.x = 0;\n        } else if (lockScaleY) {\n          delta.y = 0;\n        }\n\n        transformRect.translate(delta);\n\n        for (var i = 0; i < localSelect.length; i++) {\n          localSelect[i].translate(delta);\n        }\n\n        mouseDrag(mousePos);\n      }\n    }); // - switched to another tool -\n\n    bus.$on('deactive-select', function () {\n      self.CLEAR_SELECT();\n\n      for (var i = 0; i < localSelect.length; i++) {\n        localSelect[i].selected = false;\n      }\n\n      localSelect = [];\n      hideTransformBox();\n    });\n    bus.$on('activate-select', function () {\n      if (self.SELECTED.length > 0) {\n        for (var i = 0; i < self.SELECTED.length; i++) {\n          localSelect.push(self.SELECTED[i]);\n        }\n\n        drawTransformBox(getBounds());\n      }\n    });\n    bus.$on('set_color_stroke', function (color) {\n      for (var i = 0; i < localSelect.length; i++) {\n        localSelect[i].strokeColor = color;\n      }\n    });\n    bus.$on('set_color_fill', function (color) {\n      for (var i = 0; i < localSelect.length; i++) {\n        localSelect[i].fillColor = color;\n      }\n    });\n    bus.$on('set_width', function (width) {\n      for (var i = 0; i < localSelect.length; i++) {\n        localSelect[i].strokeWidth = width;\n      }\n    });\n    bus.$on('set-cap', function (type) {\n      for (var i = 0; i < localSelect.length; i++) {\n        localSelect[i].strokeCap = type;\n      }\n    });\n    document.addEventListener('mousedown', function (e) {\n      var temp = [];\n\n      for (var i = 0; i < _this.ACTIONS.length; i++) {\n        temp.push(_this.ACTIONS[i].data.paths.length);\n      }\n\n      console.log(temp);\n    });\n  }\n};",{"version":3,"sources":["ToolSelect.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-select.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\nimport { bus, Action } from '@/main.js'\r\n\r\nexport default {\r\n  name: 'ToolSelect',\r\n  computed: {\r\n    ...mapState([\r\n      'ACTIVE',\r\n      'TOOLSELECT',\r\n      'OBJECTS',\r\n      'SELECTED',\r\n      'ACTIONS'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT',\r\n      'DELETE_SELECT',\r\n      'ADD_ACTION',\r\n      'UNDO'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"select\")\r\n\r\n      bus.$emit('activate-select');\r\n      this.TOOLSELECT.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var self = this;\r\n\r\n    var el = document.querySelector('#tool-select');\r\n\r\n    var hitOptions = {\r\n      segments: true,\r\n      stroke: true,\r\n      fill: true,\r\n      tolerance: 4\r\n    };\r\n\r\n    var mousePos;\r\n\r\n    // Need this to create custom drag function\r\n    var mouseDown = false;\r\n\r\n    // Path over which the mouse currently hovers\r\n    var hoverItem;\r\n    var hoverSelection = new Path();\r\n    hoverSelection.selectable = false;\r\n\r\n    // Transform rectangle cache\r\n    var lastTransformRect;\r\n\r\n    // The selection rectangle with transform points\r\n    var transformRect = new Path();\r\n    var transformPoints = {\r\n      topLeft: null,\r\n      topMiddle: null,\r\n      topRight: null,\r\n\r\n      leftCenter: null,\r\n      rightCenter: null,\r\n\r\n      bottomLeft: null,\r\n      bottomMiddle: null, \r\n      bottomRight: null\r\n    }\r\n\r\n    // Updated through zoom\r\n    var transformBoxSize = 7/view.zoom;\r\n    var transformBoxWidth = 2/view.zoom;\r\n\r\n    // Object with transform information\r\n    var transform = {\r\n      // Scaling\r\n      hover: false,\r\n      scaling: false,\r\n      pivot: null,\r\n      dir: '', // topLeft, topMiddle, ...\r\n\r\n      scale_facH: null,\r\n      scale_facW: null,\r\n\r\n      // Dragging\r\n      hoverDrag: false,\r\n      dragging: false\r\n    };\r\n\r\n    // The relative distances used in scaling\r\n    var relH;\r\n    var relW;\r\n\r\n    var selectingPoint = null;\r\n    var selectRectPath = new Path();\r\n\r\n    // Local array containing the selected paths (self.SELECTED is the public array)\r\n    var localSelect = [];\r\n\r\n\r\n\r\n    var _lastMousePos;\r\n    var mouseDelta;\r\n\r\n\r\n\r\n    var flippedV = false;\r\n    var flippedH = false;\r\n    var lockScaleX = false;\r\n    var lockScaleY = false;\r\n    var point;\r\n\r\n    var selectRect;\r\n\r\n    // Object containing the data before the scaling, useful for undo and shift/control modifiers\r\n    var initTransfData = {\r\n      height: null,\r\n      width: null,\r\n      pivot: null,\r\n      center: null\r\n    }\r\n\r\n    var action = {\r\n      move: new Action('move', {\r\n        startPos: null,\r\n        endPos: null,\r\n        paths: null,\r\n      }),\r\n      scale: new Action('scale', {\r\n        paths: null,\r\n        pivot: null,\r\n        handle_init: null,\r\n        handle_end: null,\r\n        lockX: false,\r\n        lockY: false,\r\n        shift: false\r\n      })\r\n    }\r\n\r\n\r\n\r\n    // Remove the selection box with transform points\r\n    function hideTransformBox() {\r\n      transformRect.remove();\r\n\r\n      Object.keys(transformPoints).forEach(function(point, index) {\r\n        if(transformPoints[point]) {\r\n          transformPoints[point].remove();\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    // Draw selection box with transform points\r\n    function drawTransformBox(rect) {\r\n      if(rect) {\r\n        lastTransformRect = rect;\r\n      }\r\n\r\n      if(!lastTransformRect)\r\n        return;\r\n\r\n      // Draw rect\r\n      transformRect = Path.Rectangle(lastTransformRect);\r\n      transformRect.strokeColor = 'black';\r\n      transformRect.selectable = false;\r\n      transformRect.strokeWidth = 0.5/view.zoom;\r\n\r\n      // Calculate the positions\r\n      var topLeftPt = lastTransformRect.point.subtract(transformBoxSize/2);\r\n      var topMiddlePt = new Point(lastTransformRect.point.x + lastTransformRect.width/2, lastTransformRect.point.y).subtract(transformBoxSize/2);\r\n      var topRightPt = new Point(lastTransformRect.point.x + lastTransformRect.width, lastTransformRect.point.y).subtract(transformBoxSize/2);\r\n\r\n      var middleLeftPt = new Point(lastTransformRect.point.x, lastTransformRect.point.y + lastTransformRect.height/2).subtract(transformBoxSize/2);\r\n      var middleRightPt = new Point(lastTransformRect.point.x + lastTransformRect.width, lastTransformRect.point.y + lastTransformRect.height/2).subtract(transformBoxSize/2);\r\n\r\n      var bottomLeftPt = new Point(lastTransformRect.point.x, lastTransformRect.point.y + lastTransformRect.height).subtract(transformBoxSize/2);\r\n      var bottomMiddlePt = new Point(lastTransformRect.point.x + lastTransformRect.width/2, lastTransformRect.point.y + lastTransformRect.height).subtract(transformBoxSize/2);\r\n      var bottomRightPt = new Point(lastTransformRect.point.x + lastTransformRect.width, lastTransformRect.point.y + lastTransformRect.height).subtract(transformBoxSize/2);\r\n\r\n      // Calculate the boxes\r\n      var topLeftRect = new Rectangle(topLeftPt, transformBoxSize);\r\n      var topMiddleRect = new Rectangle(topMiddlePt, transformBoxSize);\r\n      var topRightRect = new Rectangle(topRightPt, transformBoxSize);\r\n\r\n      var middleLeftRect = new Rectangle(middleLeftPt, transformBoxSize);\r\n      var middleRightRect = new Rectangle(middleRightPt, transformBoxSize);\r\n      \r\n      var bottomLeftRect = new Rectangle(bottomLeftPt, transformBoxSize);\r\n      var bottomMiddleRect = new Rectangle(bottomMiddlePt, transformBoxSize);\r\n      var bottomRightRect = new Rectangle(bottomRightPt, transformBoxSize);\r\n\r\n      // Assign the boxes\r\n      transformPoints.topLeft = Path.Rectangle(topLeftRect);\r\n      transformPoints.topMiddle = Path.Rectangle(topMiddleRect);\r\n      transformPoints.topRight = Path.Rectangle(topRightRect);\r\n\r\n      transformPoints.leftCenter = Path.Rectangle(middleLeftRect);\r\n      transformPoints.rightCenter = Path.Rectangle(middleRightRect);\r\n\r\n      transformPoints.bottomLeft = Path.Rectangle(bottomLeftRect);\r\n      transformPoints.bottomMiddle = Path.Rectangle(bottomMiddleRect);\r\n      transformPoints.bottomRight = Path.Rectangle(bottomRightRect);\r\n\r\n      // Set type\r\n      Object.keys(transformPoints).forEach(function(point, index) {\r\n        if(transformPoints[point]) {\r\n          transformPoints[point].type = 'transformPoint';\r\n        }\r\n      });\r\n\r\n      // Set cursor type\r\n      transformPoints.topLeft.cursorType = \"nw-resize\";\r\n      transformPoints.bottomRight.cursorType = \"nw-resize\";\r\n\r\n      transformPoints.topMiddle.cursorType = \"n-resize\";\r\n      transformPoints.bottomMiddle.cursorType = \"n-resize\";\r\n\r\n      transformPoints.topRight.cursorType = \"ne-resize\";\r\n      transformPoints.bottomLeft.cursorType = \"ne-resize\";\r\n\r\n      transformPoints.leftCenter.cursorType = \"e-resize\";\r\n      transformPoints.rightCenter.cursorType = \"e-resize\";\r\n\r\n      // Set names\r\n      transformPoints.topLeft.name = \"topLeft\";\r\n      transformPoints.topRight.name = \"topRight\";\r\n      transformPoints.topMiddle.name = \"topCenter\";\r\n\r\n      transformPoints.leftCenter.name = \"leftCenter\";\r\n      transformPoints.rightCenter.name = \"rightCenter\";\r\n\r\n      transformPoints.bottomLeft.name = \"bottomLeft\";\r\n      transformPoints.bottomMiddle.name = \"bottomCenter\";\r\n      transformPoints.bottomRight.name = \"bottomRight\";\r\n\r\n      // Set the box colors\r\n      Object.keys(transformPoints).forEach(function(point, index) {\r\n        if(transformPoints[point]) {\r\n          transformPoints[point].selectable = false;\r\n          transformPoints[point].strokeColor = 'blue';\r\n          transformPoints[point].fillColor = 'white';\r\n          transformPoints[point].strokeWidth = transformBoxWidth;\r\n        }\r\n      });\r\n    }\r\n\r\n\r\n    // Redraw the selection box with transform points\r\n    function updateTransformBox(bounds) {\r\n      hideTransformBox();\r\n\r\n      if(bounds) {\r\n        drawTransformBox(bounds);\r\n      }\r\n      else {\r\n        drawTransformBox();\r\n      }\r\n    }\r\n\r\n\r\n    // Return the opposite point on the transform box\r\n    function getOppositePoint(point, x, y, bounds) {\r\n      if(!point) {\r\n        alert(\"warning: 001\");\r\n        return;\r\n      }\r\n      var _point = point;\r\n      var opposite = bounds.center.add(bounds.center.subtract(point));\r\n\r\n      if(x) {\r\n        _point = new Point(opposite.x, _point.y);\r\n      }\r\n      if(y) {\r\n        _point = new Point(_point.x, opposite.y);\r\n      }\r\n\r\n      return _point;\r\n    }\r\n\r\n\r\n    // Get the selection rectangle\r\n    function getBounds() {\r\n      if(localSelect.length == 0)\r\n        return;\r\n\r\n      var _temp = [];\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        _temp.push(localSelect[i].clone());\r\n      }\r\n\r\n      // Make a compoundpath to get the bounds for the transform box\r\n      var _grouped = new CompoundPath({\r\n        children: _temp\r\n      });\r\n\r\n      var rect = _grouped.bounds;\r\n      _grouped.remove();\r\n\r\n      return rect;\r\n    }\r\n\r\n\r\n    function RedrawTransformPoints() {\r\n      Object.keys(transformPoints).forEach((point, index) => {\r\n        transformPoints[point].position = transformRect.bounds[point];\r\n      });\r\n    }\r\n\r\n\r\n    // While scaling check whether the selection should be flipped\r\n    function checkScaleFlip() {\r\n      if(relH > 0 && flippedV && !lockScaleY) {\r\n        transform.scale_facH = -transform.scale_facH\r\n        flippedV = false\r\n      }\r\n      else if(relH < 0 && !flippedV && !lockScaleY) {\r\n        transform.scale_facH = -transform.scale_facH\r\n        flippedV = true\r\n      }\r\n      \r\n      if(relW > 0 && !flippedH && !lockScaleX) {\r\n        transform.scale_facW = -transform.scale_facW\r\n        flippedH = true\r\n      }\r\n      if(relW < 0 && flippedH && !lockScaleX) {\r\n        transform.scale_facW = -transform.scale_facW\r\n        flippedH = false\r\n      }\r\n    }\r\n\r\n\r\n    // Handle ctrl-key presses\r\n    function handleControlKey() {\r\n      var delta = initTransfData.center.subtract(transformRect.bounds.center);\r\n\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        localSelect[i].translate(delta);\r\n      }\r\n\r\n      transformRect.position = initTransfData.center;\r\n      point = new Point(initTransfData.center.x, initTransfData.center.y);\r\n\r\n      action.scale.data.pivot = point;\r\n\r\n      mouseDrag(mousePos);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // - Mouse down -\r\n    self.TOOLSELECT.onMouseDown = function(e) {\r\n      mouseDown = true;\r\n      _lastMousePos = e.point;\r\n\r\n      if(transform.hoverDrag) {\r\n        action.move = new Action('move', {\r\n          paths: localSelect,\r\n          startPos: e.point,\r\n          endPos: null\r\n        });\r\n\r\n        transform.dragging = true;\r\n        return;\r\n      }\r\n\r\n      hideTransformBox();\r\n      if(transform.hover) {\r\n        var bounds = getBounds();\r\n\r\n        transform.scaling = true;\r\n\r\n        drawTransformBox();\r\n\r\n        transform.dir = e.item.name;\r\n        point = getOppositePoint(bounds[transform.dir], true, true, bounds);\r\n\r\n        // Updating the backup data (for shift-scale and for undo)\r\n        initTransfData.width = bounds.width;\r\n        initTransfData.height = bounds.height;\r\n        initTransfData.pivot = new Point(point.x, point.y);\r\n        initTransfData.center = new Point(bounds.center.x, bounds.center.y);\r\n\r\n        switch(transform.dir) {\r\n          case 'bottomLeft':\r\n            flippedV = false;\r\n            flippedH = false;\r\n            lockScaleX = false;\r\n            lockScaleY = false;\r\n            break;\r\n          case 'topLeft':\r\n            flippedV = true;\r\n            flippedH = false;\r\n            lockScaleX = false;\r\n            lockScaleY = false;\r\n            break;\r\n          case 'bottomRight':\r\n            flippedV = false;\r\n            flippedH = true;\r\n            lockScaleX = false;\r\n            lockScaleY = false;\r\n            break;\r\n          case 'topRight':\r\n            flippedV = true;\r\n            flippedH = true;\r\n            lockScaleX = false;\r\n            lockScaleY = false;\r\n            break;\r\n          case 'bottomCenter':\r\n            flippedV = false;\r\n            flippedH = false;\r\n            lockScaleX = true;\r\n            lockScaleY = false;\r\n            break;\r\n          case 'topCenter':\r\n            flippedV = true;\r\n            flippedH = false;\r\n            lockScaleX = true;\r\n            lockScaleY = false;\r\n            break;\r\n          case 'leftCenter':\r\n            flippedV = false;\r\n            flippedH = false;\r\n            lockScaleX = false;\r\n            lockScaleY = true;\r\n            break;\r\n          case 'rightCenter':\r\n            flippedV = false;\r\n            flippedH = true;\r\n            lockScaleX = false;\r\n            lockScaleY = true;\r\n            break;\r\n        }\r\n\r\n\r\n        if (e.modifiers.control) {\r\n          handleControlKey();\r\n        }\r\n\r\n        action.scale = new Action('scale', {\r\n          paths: localSelect,\r\n          pivot: initTransfData.pivot,\r\n          lockX: lockScaleX,\r\n          lockY: lockScaleY,\r\n          handle_init: bounds[transform.dir],\r\n          handle_end: null,\r\n          shift: false\r\n        })\r\n\r\n        mouseDrag(e);\r\n\r\n        return;\r\n      }\r\n      \r\n      transformRect = new Path();\r\n\r\n      // Mouse is not over a shape\r\n      if(!hoverItem) {\r\n        localSelect = [];\r\n      }\r\n\r\n      // Mouse is over a shape\r\n      if(hoverSelection) {\r\n        hoverSelection.remove();\r\n\r\n        if (hoverItem && !hoverItem.selected && hoverItem.selectable) {\r\n          // Shift key is pressed\r\n          if(e.modifiers.shift) {\r\n            hoverItem.selected = true;\r\n\r\n            self.ADD_SELECT(hoverItem);\r\n            localSelect.push(hoverItem);\r\n          }\r\n          // Shift key is not pressed\r\n          else {\r\n            project.activeLayer.selected = false;\r\n            hoverItem.selected = true;\r\n\r\n            localSelect = [];\r\n            self.CLEAR_SELECT();\r\n\r\n            console.log(\"added to selection\")\r\n            self.ADD_SELECT(hoverItem);\r\n            localSelect.push(hoverItem);\r\n          }\r\n\r\n          drawTransformBox(getBounds());\r\n        }\r\n      }\r\n      \r\n      if(!e.item) {\r\n        console.log(\"selection was cleared\")\r\n        project.activeLayer.selected = false;\r\n        self.CLEAR_SELECT();\r\n        selectingPoint = e.point;\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // - Mouse move -\r\n    self.TOOLSELECT.onMouseMove = function(e) {\r\n      mousePos = e;\r\n\r\n      if (mouseDown) {\r\n        mouseDrag(e);\r\n      }\r\n\r\n      document.body.style.cursor = \"default\";\r\n      transform.hover = false;\r\n\r\n      if (hoverItem) {\r\n        hoverItem = null;\r\n        hoverSelection.remove();\r\n      }\r\n\r\n      if (e.item) {\r\n        hoverItem = e.item;\r\n\r\n        if(hoverItem.selectable && !hoverItem.selected) {\r\n          hoverSelection = hoverItem.clone();\r\n          hoverSelection.strokeColor = '#33b5ff';\r\n          hoverSelection.strokeWidth = 2 / paper.view.zoom;\r\n\r\n          hoverSelection.selectable = false;\r\n        }\r\n        else {\r\n          if(hoverItem.type == 'transformPoint') {\r\n            document.body.style.cursor = hoverItem.cursorType;\r\n\r\n            transform.hover = true;\r\n            transform.pivot = hoverItem.opposite;\r\n          }\r\n        }\r\n      }\r\n\r\n      if(selectingPoint && !transform.hover) {\r\n        selectRectPath.remove();\r\n\r\n        selectRect = new Rectangle(selectingPoint, e.point);\r\n\r\n        selectRectPath = Path.Rectangle(selectRect);\r\n        selectRectPath.selectable = false;\r\n        selectRectPath.dashArray = [4/view.zoom, 3/view.zoom];\r\n        selectRectPath.strokeColor = 'black';\r\n        selectRectPath.strokeWidth = 0.5/view.zoom;\r\n\r\n        var _selRect = new Rectangle(selectingPoint, e.point);\r\n\r\n        for(var i=0; i < self.OBJECTS.length; i++) {\r\n          // Selection rect intersects with the shape\r\n          if(selectRectPath.intersects(self.OBJECTS[i])) {\r\n            if(!self.OBJECTS[i].selected) {\r\n              self.OBJECTS[i].selected = true;\r\n              localSelect.push(self.OBJECTS[i]);\r\n            }\r\n          }\r\n          // Selection rect doesn't intersect with shape\r\n          else {\r\n            // Shape is inside the selection rect\r\n            if(self.OBJECTS[i].isInside(_selRect)) {\r\n              if(!self.OBJECTS[i].selected) {\r\n                self.OBJECTS[i].selected = true;\r\n                localSelect.push(self.OBJECTS[i]);\r\n              }\r\n            }\r\n\r\n            // Shape is not inside the selection rect\r\n            else {\r\n              self.OBJECTS[i].selected = false;\r\n              var index = localSelect.findIndex(x => x === self.OBJECTS[i]);\r\n              if(index != -1) {\r\n                localSelect.splice(index, 1);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      transform.hoverDrag = false;\r\n\r\n      if(self.SELECTED.length != 0) {\r\n        if(e.point.isInside(lastTransformRect) && !transform.hover && !transform.scaling) {\r\n          document.body.style.cursor = \"move\";\r\n          transform.hoverDrag = true;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // - Mouse up -\r\n    self.TOOLSELECT.onMouseUp = function(e) {\r\n      mouseDown = false;\r\n      var _return = false;\r\n      \r\n      selectingPoint = null;\r\n      selectRectPath.remove();\r\n\r\n      if(localSelect.length == 0) {\r\n        return;\r\n      }\r\n\r\n      if(transform.scaling) {\r\n        lockScaleX = false;\r\n        lockScaleY = false;\r\n\r\n        var bounds = getBounds();\r\n        \r\n        action.scale.data.handle_end = getOppositePoint(point, true, true, bounds);\r\n        if(e.modifiers.shift) {\r\n          action.scale.data.shift = true;\r\n        }\r\n        self.ADD_ACTION(action.scale);\r\n\r\n        transform.scaling = false;\r\n        _return = true;\r\n      }\r\n\r\n      if(transform.dragging) {\r\n        action.move.data.endPos = e.point;\r\n        console.log(\"added move action\")\r\n        self.ADD_ACTION(action.move);\r\n\r\n        transform.dragging = false;\r\n\r\n        _return = true;\r\n      }\r\n\r\n      // Update transform box with new rectangle\r\n      hideTransformBox();\r\n      drawTransformBox(getBounds());\r\n\r\n      if(_return) {\r\n        return;\r\n      }\r\n\r\n      self.CLEAR_SELECT();\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        self.ADD_SELECT(localSelect[i]);\r\n      }\r\n    }\r\n\r\n\r\n\r\n    // - Mouse drag -\r\n    function mouseDrag(e) {\r\n      mouseDelta = e.point.subtract(_lastMousePos);\r\n      _lastMousePos = e.point;\r\n\r\n      var path = transformRect;\r\n\r\n      // User is moving the selection\r\n      if(transform.dragging) {\r\n        for(var i=0; i<localSelect.length; i++) {\r\n          localSelect[i].translate(mouseDelta);\r\n        }\r\n\r\n        transformRect.translate(mouseDelta);\r\n        lastTransformRect = transformRect.bounds;\r\n\r\n        Object.keys(transformPoints).forEach(function(point, index) {\r\n          transformPoints[point].translate(mouseDelta);\r\n      });\r\n        return;\r\n      }\r\n\r\n      // User is scaling the selection\r\n      if(transform.scaling) {\r\n        var bounds = transformRect.bounds;\r\n\r\n        if(!lockScaleY) {\r\n          relH = e.point.subtract(point).y;\r\n          transform.scale_facH = Math.abs(relH)/bounds.height;\r\n        }\r\n        else {\r\n          transform.scale_facH = 1;\r\n        }\r\n        if(!lockScaleX) {\r\n          relW = e.point.subtract(point).x;\r\n          transform.scale_facW = Math.abs(relW)/bounds.width;\r\n        }\r\n        else {\r\n          transform.scale_facW = 1;\r\n        }\r\n        \r\n        if(Math.abs(transform.scale_facH) < 0.1 && !lockScaleY) {\r\n            return;\r\n        }\r\n\r\n        if(Math.abs(transform.scale_facW) < 0.1 && !lockScaleX) {\r\n          return;\r\n        }\r\n\r\n        if(!e.modifiers.shift) {\r\n          checkScaleFlip();\r\n        }\r\n\r\n        if(e.modifiers.shift) {\r\n          var min = Math.min(Math.abs(transform.scale_facH), Math.abs(transform.scale_facW));\r\n\r\n          if(lockScaleY) {\r\n            min = Math.abs(transform.scale_facW);\r\n          }\r\n          else if(lockScaleX) {\r\n            min = Math.abs(transform.scale_facH);\r\n          }\r\n\r\n          transform.scale_facH = min;\r\n          transform.scale_facW = min;\r\n        }\r\n\r\n        if(e.modifiers.control) {\r\n          if(!lockScaleX) {\r\n            transform.scale_facW *= 2;\r\n          }\r\n          if(!lockScaleY) {\r\n            transform.scale_facH *= 2;\r\n          }\r\n        }\r\n\r\n        // Scale all the selected items\r\n        for(var i=0; i<localSelect.length; i++) {\r\n          localSelect[i].scale(transform.scale_facW, transform.scale_facH, point)\r\n        }\r\n\r\n        transformRect.scale(transform.scale_facW, transform.scale_facH, point);\r\n\r\n        // Don't show the points while scaling\r\n        Object.keys(transformPoints).forEach((point, index) => {\r\n          transformPoints[point].remove();\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // - user is zooming -\r\n    bus.$on('zoom', () => {\r\n      // Keep the transform box's width constant over zoom\r\n      transformRect.strokeWidth = 0.5/view.zoom;\r\n      transformBoxSize = 7/view.zoom;\r\n      transformBoxWidth = 2/view.zoom;\r\n\r\n      if(localSelect.length > 0) {\r\n        updateTransformBox();\r\n      }\r\n    });\r\n\r\n\r\n\r\n    // - Ctrl + Z -\r\n    bus.$on('undo', () => {\r\n      if(self.ACTIONS.length > 0) {\r\n        self.UNDO();\r\n\r\n        project.activeLayer.selected = false;\r\n\r\n        localSelect = [...self.SELECTED];\r\n        for(var i=0; i<localSelect.length; i++) {\r\n          localSelect[i].selected = true;\r\n        }\r\n\r\n        updateTransformBox(getBounds());\r\n      }\r\n    });\r\n\r\n\r\n\r\n    // - delete key pressed -\r\n    bus.$on('delete_selection', () => {\r\n      localSelect = [];\r\n      hideTransformBox();\r\n    });\r\n\r\n\r\n\r\n    // - shift key pressed -\r\n    bus.$on('shift', () => {\r\n      if(transform.scaling) {\r\n        var bounds = getBounds();\r\n\r\n        var facH_init = initTransfData.height/bounds.height;\r\n        var facW_init = initTransfData.width/bounds.width;\r\n\r\n        // Scale the selection to its initial size\r\n        for(var i=0; i<localSelect.length; i++) {\r\n          localSelect[i].scale(facW_init, facH_init, point);\r\n        }\r\n\r\n        // Resize the transform rect as well\r\n        transformRect.scale(facW_init, facH_init, point);\r\n        var rel;\r\n\r\n        if(lockScaleX) {\r\n          rel = Math.abs(relH);\r\n        }\r\n        else if(lockScaleY) {\r\n          rel = Math.abs(relW);\r\n        }\r\n        else {\r\n          rel = Math.min(Math.abs(relH), Math.abs(relW));\r\n        }\r\n\r\n        var fac = rel/Math.min(initTransfData.width, initTransfData.height);\r\n\r\n        // Resize the selection to the current size without deformation\r\n        for(var i=0; i<localSelect.length; i++) {\r\n          localSelect[i].scale(fac, fac, point);\r\n        }\r\n\r\n        // Resize transform rect as well\r\n        transformRect.scale(fac, fac, point);\r\n\r\n        mouseDrag(mousePos);\r\n      }\r\n    });\r\n\r\n\r\n\r\n    // - control key pressed -\r\n    bus.$on('control', () => {\r\n      if(transform.scaling) {\r\n        handleControlKey();\r\n      }\r\n    });\r\n\r\n\r\n\r\n    // - control key released -\r\n    bus.$on('control_up', () => {\r\n      if(transform.scaling) {\r\n        point = new Point(initTransfData.pivot.x, initTransfData.pivot.y);\r\n        action.scale.data.pivot = point;\r\n\r\n        relH = mousePos.point.subtract(point).y;\r\n        relW = mousePos.point.subtract(point).x;\r\n\r\n        var curDistPt;\r\n\r\n        if (relH >= 0 && relW >= 0) {\r\n          curDistPt = transformRect.bounds.topLeft;\r\n          flippedV = false;\r\n          flippedH = true;\r\n        }\r\n        else if(relH >= 0 && relW < 0) {\r\n          curDistPt = transformRect.bounds.topRight;\r\n          flippedV = false;\r\n          flippedH = false;\r\n        }\r\n        else if(relH < 0 && relW >= 0) {\r\n          curDistPt = transformRect.bounds.bottomLeft;\r\n          flippedV = true;\r\n          flippedH = true;\r\n        }\r\n        else if(relH < 0 && relW < 0) {\r\n          curDistPt = transformRect.bounds.bottomRight;\r\n          flippedV = true;\r\n          flippedH = false;\r\n        }\r\n\r\n        var delta = initTransfData.pivot.subtract(curDistPt);\r\n        if(lockScaleX) {\r\n          delta.x = 0;\r\n        }\r\n        else if(lockScaleY) {\r\n          delta.y = 0;\r\n        }\r\n\r\n        transformRect.translate(delta);\r\n        for(var i=0; i<localSelect.length; i++) {\r\n          localSelect[i].translate(delta);\r\n        }\r\n\r\n        mouseDrag(mousePos);\r\n      }\r\n    });\r\n\r\n\r\n\r\n    // - switched to another tool -\r\n    bus.$on('deactive-select', () => {\r\n      self.CLEAR_SELECT();\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        localSelect[i].selected = false;\r\n      }\r\n\r\n      localSelect = [];\r\n      hideTransformBox();\r\n    });\r\n\r\n    bus.$on('activate-select', () => {\r\n      if(self.SELECTED.length > 0) {\r\n        for(var i=0; i<self.SELECTED.length; i++) {\r\n          localSelect.push(self.SELECTED[i]);\r\n        }\r\n\r\n        drawTransformBox(getBounds());\r\n      }\r\n    });\r\n\r\n    bus.$on('set_color_stroke', (color) => {\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        localSelect[i].strokeColor = color\r\n      }\r\n    });\r\n\r\n    bus.$on('set_color_fill', (color) => {\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        localSelect[i].fillColor = color\r\n      }\r\n    });\r\n\r\n    bus.$on('set_width', (width) => {\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        localSelect[i].strokeWidth = width\r\n      }\r\n    });\r\n\r\n    bus.$on('set-cap', (type) => {\r\n      for(var i=0; i<localSelect.length; i++) {\r\n        localSelect[i].strokeCap = type\r\n      }\r\n    });\r\n\r\n    document.addEventListener('mousedown', (e) => {\r\n      var temp = []\r\n      for(var i=0; i<this.ACTIONS.length; i++) {\r\n        temp.push(this.ACTIONS[i].data.paths.length);\r\n      }\r\n      console.log(temp)\r\n    });\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"],"sourceRoot":"src/components/tools"}]}