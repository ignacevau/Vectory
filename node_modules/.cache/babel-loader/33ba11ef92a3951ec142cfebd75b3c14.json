{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js!D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolCircle.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolCircle.vue","mtime":1569069957075},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.math.sign\";\nimport _objectSpread from \"D:\\\\GitHub\\\\Vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport paper from 'paper';\nimport Tool from '../Tool.vue';\nimport { mapMutations, mapState } from 'vuex';\nexport default {\n  name: 'ToolCircle',\n  computed: _objectSpread({}, mapState(['TOOLCIRCLE', 'CIRCLE_STROKECOLOR', 'CIRCLE_FILLCOLOR', 'CIRCLE_OPACITY', 'CIRCLE_WIDTH'])),\n  components: {\n    Tool: Tool\n  },\n  methods: _objectSpread({}, mapMutations(['SET_ACTIVE', 'ADD_SHAPE', 'ADD_SELECT', 'CLEAR_SELECT']), {\n    setActive: function setActive() {\n      this.SET_ACTIVE(\"circle\");\n      this.TOOLCIRCLE.activate();\n    }\n  }),\n  mounted: function mounted() {\n    var _this = this;\n\n    var newPath, oldPath, startPoint;\n\n    this.TOOLCIRCLE.onMouseDown = function (e) {\n      _this.CLEAR_SELECT();\n\n      newPath = new Path();\n      startPoint = e.point;\n      project.activeLayer.selected = false;\n    };\n\n    this.TOOLCIRCLE.onMouseDrag = function (e) {\n      newPath.remove();\n      var endPoint = e.point; // No shift modifier --> ellipse\n\n      if (!e.modifiers.shift) {\n        // No control modifier --> scale from corner\n        if (!e.modifiers.control) {\n          var rect = new Rectangle(startPoint, endPoint);\n          newPath = Path.Ellipse(rect);\n        } // Control modifier --> scale from center\n        else if (e.modifiers.control) {\n            var center = startPoint;\n            var rad = [endPoint.x - startPoint.x, endPoint.y - startPoint.y];\n            newPath = Path.Ellipse({\n              center: center,\n              radius: rad\n            });\n          }\n      } // Shift modifier --> circle\n      else if (e.modifiers.shift) {\n          var _center, _rad; // No control modifier --> scale from corner\n\n\n          if (!e.modifiers.control) {\n            _rad = Math.max(Math.abs(startPoint.x - endPoint.x), Math.abs(startPoint.y - endPoint.y)) / 2;\n            _center = new Point(startPoint.x + _rad / 2 * Math.sign(endPoint.x - startPoint.x), startPoint.y + _rad / 2 * Math.sign(endPoint.y - startPoint.y));\n          } // Control modifier --> scale from center\n          else if (e.modifiers.control) {\n              _rad = startPoint.getDistance(endPoint);\n              _center = startPoint;\n            }\n\n          newPath = Path.Circle(_center, _rad);\n        }\n\n      newPath.strokeColor = _this.CIRCLE_STROKECOLOR;\n      newPath.fillColor = _this.CIRCLE_FILLCOLOR;\n      newPath.opacity = _this.CIRCLE_OPACITY;\n      newPath.strokeWidth = _this.CIRCLE_WIDTH;\n    };\n\n    this.TOOLCIRCLE.onMouseUp = function (e) {\n      // Don't create object for a click\n      if (e.delta.length < 3) {\n        newPath.remove();\n        return;\n      }\n\n      newPath.selected = true;\n      oldPath = newPath;\n      newPath.selectable = true;\n      newPath.type = \"shape\";\n\n      _this.ADD_SELECT(newPath);\n\n      _this.ADD_SHAPE(newPath);\n    };\n  }\n};",{"version":3,"sources":["ToolCircle.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-circle.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolCircle',\r\n  computed: {\r\n    ...mapState([\r\n      'TOOLCIRCLE',\r\n\r\n      'CIRCLE_STROKECOLOR',\r\n      'CIRCLE_FILLCOLOR',\r\n      'CIRCLE_OPACITY',\r\n      'CIRCLE_WIDTH'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"circle\")\r\n\r\n      this.TOOLCIRCLE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    let newPath, oldPath, startPoint;\r\n\r\n    this.TOOLCIRCLE.onMouseDown = (e) => {\r\n      this.CLEAR_SELECT();\r\n\r\n      newPath = new Path();\r\n\r\n      startPoint = e.point;\r\n\r\n      project.activeLayer.selected = false;        \r\n    }\r\n\r\n    this.TOOLCIRCLE.onMouseDrag = (e) => {\r\n      newPath.remove();\r\n\r\n      let endPoint = e.point;\r\n\r\n      // No shift modifier --> ellipse\r\n      if(!e.modifiers.shift) {\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          let rect = new Rectangle(startPoint, endPoint);\r\n\r\n          newPath = Path.Ellipse(rect);\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if (e.modifiers.control) {\r\n          let center = startPoint;\r\n          let rad = [endPoint.x - startPoint.x, endPoint.y - startPoint.y];\r\n\r\n          newPath = Path.Ellipse({\r\n            center: center,\r\n            radius: rad\r\n          });\r\n        }\r\n\r\n      }\r\n      // Shift modifier --> circle\r\n      else if (e.modifiers.shift) {\r\n        let center, rad;\r\n\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          rad = Math.max(Math.abs(startPoint.x-endPoint.x), Math.abs(startPoint.y-endPoint.y)) / 2;\r\n          center = new Point(startPoint.x + (rad/2)*Math.sign(endPoint.x-startPoint.x), startPoint.y + (rad/2)*Math.sign(endPoint.y-startPoint.y));\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if(e.modifiers.control) {\r\n          rad = startPoint.getDistance(endPoint);\r\n          center = startPoint;\r\n        }\r\n        \r\n        newPath = Path.Circle(center, rad);\r\n      }\r\n\r\n      newPath.strokeColor = this.CIRCLE_STROKECOLOR\r\n      newPath.fillColor = this.CIRCLE_FILLCOLOR\r\n      newPath.opacity = this.CIRCLE_OPACITY\r\n      newPath.strokeWidth = this.CIRCLE_WIDTH\r\n    }\r\n\r\n    this.TOOLCIRCLE.onMouseUp = (e) => {\r\n      // Don't create object for a click\r\n      if (e.delta.length < 3) {\r\n          newPath.remove();\r\n          return;\r\n      }\r\n\r\n      newPath.selected = true;\r\n      oldPath = newPath;\r\n      newPath.selectable = true;\r\n      newPath.type = \"shape\";\r\n\r\n      this.ADD_SELECT(newPath);\r\n      this.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"],"sourceRoot":"src/components/tools"}]}