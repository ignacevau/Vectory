{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js!D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolRectangle.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolRectangle.vue","mtime":1569073754256},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.math.sign\";\nimport _objectSpread from \"D:\\\\GitHub\\\\Vectory\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport paper from 'paper';\nimport Tool from '../Tool.vue';\nimport { mapMutations, mapState } from 'vuex';\nexport default {\n  name: 'ToolRectangle',\n  computed: _objectSpread({}, mapState(['TOOLRECTANGLE', 'RECTANGLE_STROKECOLOR', 'RECTANGLE_FILLCOLOR', 'RECTANGLE_OPACITY', 'RECTANGLE_WIDTH'])),\n  components: {\n    Tool: Tool\n  },\n  methods: _objectSpread({}, mapMutations(['SET_ACTIVE', 'ADD_SHAPE', 'ADD_SELECT', 'CLEAR_SELECT']), {\n    setActive: function setActive() {\n      this.SET_ACTIVE(\"rectangle\");\n      this.TOOLRECTANGLE.activate();\n    }\n  }),\n  mounted: function mounted() {\n    var _this = this;\n\n    var newPath, oldPath, origin;\n\n    this.TOOLRECTANGLE.onMouseDown = function (e) {\n      _this.CLEAR_SELECT();\n\n      newPath = new Path();\n      origin = e.point;\n      project.activeLayer.selected = false;\n    };\n\n    this.TOOLRECTANGLE.onMouseDrag = function (e) {\n      newPath.remove();\n      var mousePos = e.point;\n      var rect; // No shift modifier --> rectangle\n\n      if (!e.modifiers.shift) {\n        var from, to; // No control modifier --> scale from corner\n\n        if (!e.modifiers.control) {\n          from = origin;\n          to = mousePos;\n        } // Control modifier --> scale from center\n        else if (e.modifiers.control) {\n            from = origin.multiply(2).subtract(mousePos);\n            to = mousePos;\n          }\n\n        rect = new Rectangle(from, to);\n      } // Shift modifier --> square\n      else if (e.modifiers.shift) {\n          // No control modifier --> scale from corner\n          if (!e.modifiers.control) {\n            var dif_x = mousePos.x - origin.x;\n            var dif_y = mousePos.y - origin.y;\n            var size = Math.max(Math.abs(dif_x), Math.abs(dif_y));\n            rect = new Rectangle(origin, size * Math.sign(dif_x), size * Math.sign(dif_y));\n          } // Control modifier --> scale from center\n          else if (e.modifiers.control) {\n              var _size = Math.max(Math.abs(origin.x - mousePos.x), Math.abs(origin.y - mousePos.y));\n\n              rect = new Rectangle(origin.subtract(_size), origin.add(_size));\n            }\n        }\n\n      newPath = Path.Rectangle(rect);\n      newPath.strokeColor = _this.RECTANGLE_STROKECOLOR;\n      newPath.fillColor = _this.RECTANGLE_FILLCOLOR;\n      newPath.opacity = _this.RECTANGLE_OPACITY;\n      newPath.strokeWidth = _this.RECTANGLE_WIDTH;\n    };\n\n    this.TOOLRECTANGLE.onMouseUp = function (e) {\n      // Don't create object for a click\n      if (e.delta.length < 3) {\n        newPath.remove();\n        return;\n      }\n\n      newPath.selected = true;\n      oldPath = newPath;\n      newPath.selectable = true;\n      newPath.type = \"shape\";\n\n      _this.ADD_SELECT(newPath);\n\n      _this.ADD_SHAPE(newPath);\n    };\n  }\n};",{"version":3,"sources":["ToolRectangle.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-rectangle.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolRectangle',\r\n  computed: {\r\n    ...mapState([\r\n      'TOOLRECTANGLE',\r\n\r\n      'RECTANGLE_STROKECOLOR',\r\n      'RECTANGLE_FILLCOLOR',\r\n      'RECTANGLE_OPACITY',\r\n      'RECTANGLE_WIDTH'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"rectangle\")\r\n\r\n      this.TOOLRECTANGLE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    let newPath, oldPath, origin;\r\n\r\n    this.TOOLRECTANGLE.onMouseDown = (e) => {\r\n      this.CLEAR_SELECT();\r\n\r\n      newPath = new Path();\r\n\r\n      origin = e.point;\r\n\r\n      project.activeLayer.selected = false;        \r\n    }\r\n\r\n    this.TOOLRECTANGLE.onMouseDrag = (e) => {\r\n      newPath.remove();\r\n\r\n      let mousePos = e.point;\r\n      let rect;\r\n\r\n      // No shift modifier --> rectangle\r\n      if(!e.modifiers.shift) {\r\n        let from, to;\r\n\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          from = origin;\r\n          to = mousePos;\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if (e.modifiers.control) {\r\n          from = origin.multiply(2).subtract(mousePos);\r\n          to = mousePos;\r\n        }\r\n\r\n        rect = new Rectangle(from, to);\r\n      }\r\n      // Shift modifier --> square\r\n      else if (e.modifiers.shift) {\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          let dif_x = mousePos.x-origin.x;\r\n          let dif_y = mousePos.y-origin.y;\r\n          let size = Math.max(Math.abs(dif_x), Math.abs(dif_y));\r\n\r\n          rect = new Rectangle(origin, size*Math.sign(dif_x), size*Math.sign(dif_y));\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if(e.modifiers.control) {\r\n          let size = Math.max(Math.abs(origin.x-mousePos.x), Math.abs(origin.y-mousePos.y));\r\n\r\n          rect = new Rectangle(origin.subtract(size), origin.add(size));\r\n        }\r\n      }\r\n\r\n      newPath = Path.Rectangle(rect);\r\n\r\n      newPath.strokeColor = this.RECTANGLE_STROKECOLOR\r\n      newPath.fillColor = this.RECTANGLE_FILLCOLOR\r\n      newPath.opacity = this.RECTANGLE_OPACITY\r\n      newPath.strokeWidth = this.RECTANGLE_WIDTH\r\n    }\r\n\r\n    this.TOOLRECTANGLE.onMouseUp = (e) => {\r\n      // Don't create object for a click\r\n      if (e.delta.length < 3) {\r\n          newPath.remove();\r\n          return;\r\n      }\r\n\r\n      newPath.selected = true; \r\n      oldPath = newPath;\r\n      newPath.selectable = true;\r\n      newPath.type = \"shape\";\r\n\r\n      this.ADD_SELECT(newPath);\r\n      this.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"],"sourceRoot":"src/components/tools"}]}