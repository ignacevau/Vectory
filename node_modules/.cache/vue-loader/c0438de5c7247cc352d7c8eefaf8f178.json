{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolLine.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolLine.vue","mtime":1565016581387},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolLine',\r\n  computed: {\r\n    ...mapState([\r\n      'TOOLLINE',\r\n\r\n      'LINE_STROKECOLOR',\r\n      'LINE_OPACITY',\r\n      'LINE_WIDTH'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"line\")\r\n\r\n      this.TOOLLINE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var newPath;\r\n    var startPoint = new Point();\r\n    var endPoint = new Point();\r\n\r\n    // Keep track of how long the line is, don't create for click\r\n    var delta;\r\n\r\n    this.TOOLLINE.onMouseDown = (e) => {\r\n      this.CLEAR_SELECT();\r\n\r\n      newPath = new Path();\r\n\r\n      delta = 0;\r\n      startPoint = e.point\r\n\r\n      project.activeLayer.selected = false;\r\n    }\r\n\r\n    this.TOOLLINE.onMouseDrag = (e) => {\r\n      newPath.remove()\r\n\r\n      delta += e.delta.length;\r\n      endPoint = e.point\r\n\r\n      newPath = Path.Line(startPoint, endPoint)\r\n\r\n      newPath.strokeColor = this.LINE_STROKECOLOR\r\n      newPath.strokeWidth = this.LINE_WIDTH\r\n      newPath.opacity = this.LINE_OPACITY\r\n    }\r\n\r\n    this.TOOLLINE.onMouseUp = (e) => {\r\n      // Don't create an object for a click\r\n      if (delta < 3) {\r\n        newPath.remove();\r\n        return;\r\n      }\r\n\r\n      newPath.selected = true;\r\n      newPath.selectable = true;\r\n      newPath.type = \"shape\";\r\n\r\n      this.ADD_SELECT(newPath);\r\n      this.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ToolLine.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ToolLine.vue","sourceRoot":"src/components/tools","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-line.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolLine',\r\n  computed: {\r\n    ...mapState([\r\n      'TOOLLINE',\r\n\r\n      'LINE_STROKECOLOR',\r\n      'LINE_OPACITY',\r\n      'LINE_WIDTH'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"line\")\r\n\r\n      this.TOOLLINE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var newPath;\r\n    var startPoint = new Point();\r\n    var endPoint = new Point();\r\n\r\n    // Keep track of how long the line is, don't create for click\r\n    var delta;\r\n\r\n    this.TOOLLINE.onMouseDown = (e) => {\r\n      this.CLEAR_SELECT();\r\n\r\n      newPath = new Path();\r\n\r\n      delta = 0;\r\n      startPoint = e.point\r\n\r\n      project.activeLayer.selected = false;\r\n    }\r\n\r\n    this.TOOLLINE.onMouseDrag = (e) => {\r\n      newPath.remove()\r\n\r\n      delta += e.delta.length;\r\n      endPoint = e.point\r\n\r\n      newPath = Path.Line(startPoint, endPoint)\r\n\r\n      newPath.strokeColor = this.LINE_STROKECOLOR\r\n      newPath.strokeWidth = this.LINE_WIDTH\r\n      newPath.opacity = this.LINE_OPACITY\r\n    }\r\n\r\n    this.TOOLLINE.onMouseUp = (e) => {\r\n      // Don't create an object for a click\r\n      if (delta < 3) {\r\n        newPath.remove();\r\n        return;\r\n      }\r\n\r\n      newPath.selected = true;\r\n      newPath.selectable = true;\r\n      newPath.type = \"shape\";\r\n\r\n      this.ADD_SELECT(newPath);\r\n      this.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"]}]}