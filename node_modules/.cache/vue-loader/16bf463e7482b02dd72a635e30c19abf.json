{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolPointer.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolPointer.vue","mtime":1555956318753},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\nimport { bus } from '@/main.js'\r\n\r\nexport default {\r\n  name: 'ToolPointer',\r\n  data: function() {\r\n    return {\r\n      selected: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'ACTIVE',\r\n      'TOOLPOINTER',\r\n      'SELECTED'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"pointer\")\r\n\r\n      this.TOOLPOINTER.activate();\r\n      if(this.SELECTED.length > 0) {\r\n        this.selected = this.SELECTED[this.SELECTED.length-1]\r\n\r\n        this.CLEAR_SELECT()\r\n        this.selected.selected = true\r\n      }\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var handle;\r\n    var segment;\r\n    var draggingHandle = false;\r\n    var draggingSegment = false;\r\n\r\n    var hitOptions = {\r\n      handles: true,\r\n      segments: true,\r\n      stroke: false,\r\n      fill: false,\r\n      tolerance: 5\r\n    };\r\n\r\n    bus.$on(\"deactivate-pointer\", () => {\r\n      if(this.selected) {\r\n        this.selected.fullySelected = false\r\n      }\r\n    })\r\n\r\n    this.TOOLPOINTER.onMouseDown = (e) => {\r\n      handle = null\r\n      draggingHandle = false\r\n      draggingSegment = false\r\n\r\n      if(segment) {\r\n        segment.selected = false\r\n      }\r\n\r\n      if(e.item) {\r\n        if(e.item.className == 'Path' && e.item.selected) {\r\n          var path = e.item\r\n          var hitResult = path.hitTest(e.point, hitOptions);\r\n\r\n          if(hitResult) {\r\n            console.log('k')\r\n            if(hitResult.type == 'segment') {\r\n              segment = hitResult.segment\r\n              segment.selected = true\r\n\r\n              draggingSegment = true\r\n            }\r\n            else if(hitResult.type == 'handle-in') {\r\n              handle = hitResult.segment.handleIn\r\n\r\n              draggingHandle = true\r\n            }\r\n            else {\r\n              handle = hitResult.segment.handleOut\r\n\r\n              draggingHandle = true\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.TOOLPOINTER.onMouseDrag = (e) => {\r\n      if(draggingSegment) {\r\n\r\n      }\r\n      else if(draggingHandle) {\r\n       if(handle) {\r\n          handle.x += e.delta.x\r\n          handle.y += e.delta.y\r\n        }\r\n      }\r\n      \r\n    }\r\n\r\n    this.TOOLPOINTER.onMouseUp = (e) => {\r\n      handle = null\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ToolPointer.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA","file":"ToolPointer.vue","sourceRoot":"src/components/tools","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-pointer.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\nimport { bus } from '@/main.js'\r\n\r\nexport default {\r\n  name: 'ToolPointer',\r\n  data: function() {\r\n    return {\r\n      selected: null\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'ACTIVE',\r\n      'TOOLPOINTER',\r\n      'SELECTED'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"pointer\")\r\n\r\n      this.TOOLPOINTER.activate();\r\n      if(this.SELECTED.length > 0) {\r\n        this.selected = this.SELECTED[this.SELECTED.length-1]\r\n\r\n        this.CLEAR_SELECT()\r\n        this.selected.selected = true\r\n      }\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var handle;\r\n    var segment;\r\n    var draggingHandle = false;\r\n    var draggingSegment = false;\r\n\r\n    var hitOptions = {\r\n      handles: true,\r\n      segments: true,\r\n      stroke: false,\r\n      fill: false,\r\n      tolerance: 5\r\n    };\r\n\r\n    bus.$on(\"deactivate-pointer\", () => {\r\n      if(this.selected) {\r\n        this.selected.fullySelected = false\r\n      }\r\n    })\r\n\r\n    this.TOOLPOINTER.onMouseDown = (e) => {\r\n      handle = null\r\n      draggingHandle = false\r\n      draggingSegment = false\r\n\r\n      if(segment) {\r\n        segment.selected = false\r\n      }\r\n\r\n      if(e.item) {\r\n        if(e.item.className == 'Path' && e.item.selected) {\r\n          var path = e.item\r\n          var hitResult = path.hitTest(e.point, hitOptions);\r\n\r\n          if(hitResult) {\r\n            console.log('k')\r\n            if(hitResult.type == 'segment') {\r\n              segment = hitResult.segment\r\n              segment.selected = true\r\n\r\n              draggingSegment = true\r\n            }\r\n            else if(hitResult.type == 'handle-in') {\r\n              handle = hitResult.segment.handleIn\r\n\r\n              draggingHandle = true\r\n            }\r\n            else {\r\n              handle = hitResult.segment.handleOut\r\n\r\n              draggingHandle = true\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.TOOLPOINTER.onMouseDrag = (e) => {\r\n      if(draggingSegment) {\r\n\r\n      }\r\n      else if(draggingHandle) {\r\n       if(handle) {\r\n          handle.x += e.delta.x\r\n          handle.y += e.delta.y\r\n        }\r\n      }\r\n      \r\n    }\r\n\r\n    this.TOOLPOINTER.onMouseUp = (e) => {\r\n      handle = null\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"]}]}