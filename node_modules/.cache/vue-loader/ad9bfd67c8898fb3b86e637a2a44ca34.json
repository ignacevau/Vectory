{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\sidebar-right\\stroke-grid\\WidthInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\sidebar-right\\stroke-grid\\WidthInput.vue","mtime":1555443773784},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { bus } from '@/main.js'\r\nimport { mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'WidthInput',\r\n  data: function() {\r\n    return {\r\n      input: '',\r\n      output: 0\r\n    }\r\n  },\r\n  watch: {\r\n    input: function(_new, _old) {\r\n      if(_new == \"0\") {\r\n        bus.$emit('set_width_input', 0)\r\n      }\r\n      else if(this.checkNumber(_new)) {\r\n        bus.$emit('set_width_input', _new)\r\n      }\r\n    },\r\n    SELECTED: function(_new, _old) {\r\n      if(_new.length == 0) {\r\n        this.input = ''\r\n        return\r\n      }\r\n      else {\r\n        var sw = _new[0].strokeWidth\r\n\r\n        for(var i=0; i<_new.length; i++) {\r\n          if(_new[i].strokeWidth != sw) {\r\n            this.input = '?'\r\n            return\r\n          }\r\n        }\r\n      }\r\n\r\n      this.input = _new[0].strokeWidth\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'SELECTED'\r\n    ])\r\n  },\r\n  methods: {\r\n    checkNumber: function(n) {\r\n      return Number(n)\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var input = this.$refs[\"input\"]\r\n\r\n    document.addEventListener('click', (e) => {\r\n      if(!input.contains(e.target)) {\r\n        resetFocus();\r\n      }\r\n    })\r\n\r\n    function resetFocus () {\r\n      let scrollTop = document.body.scrollTop;\r\n      let body = document.body;\r\n\r\n      let tmp = document.createElement('input');\r\n      tmp.style.opacity = 0;\r\n      body.appendChild(tmp);\r\n      tmp.focus();\r\n      body.removeChild(tmp);\r\n      body.scrollTop = scrollTop;\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["WidthInput.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"WidthInput.vue","sourceRoot":"src/components/sidebar-right/stroke-grid","sourcesContent":["<template>\r\n  <div class=\"width-input\">\r\n    <input v-model=\"input\" type=\"text\" class=\"input-width-text\" ref=\"input\" />\r\n    <div>\r\n      <span style=\"line-height: 15px;\"><b>⌃</b></span>\r\n      <span style=\"line-height: 5px;\"><b>⌄</b></span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { bus } from '@/main.js'\r\nimport { mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'WidthInput',\r\n  data: function() {\r\n    return {\r\n      input: '',\r\n      output: 0\r\n    }\r\n  },\r\n  watch: {\r\n    input: function(_new, _old) {\r\n      if(_new == \"0\") {\r\n        bus.$emit('set_width_input', 0)\r\n      }\r\n      else if(this.checkNumber(_new)) {\r\n        bus.$emit('set_width_input', _new)\r\n      }\r\n    },\r\n    SELECTED: function(_new, _old) {\r\n      if(_new.length == 0) {\r\n        this.input = ''\r\n        return\r\n      }\r\n      else {\r\n        var sw = _new[0].strokeWidth\r\n\r\n        for(var i=0; i<_new.length; i++) {\r\n          if(_new[i].strokeWidth != sw) {\r\n            this.input = '?'\r\n            return\r\n          }\r\n        }\r\n      }\r\n\r\n      this.input = _new[0].strokeWidth\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState([\r\n      'SELECTED'\r\n    ])\r\n  },\r\n  methods: {\r\n    checkNumber: function(n) {\r\n      return Number(n)\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var input = this.$refs[\"input\"]\r\n\r\n    document.addEventListener('click', (e) => {\r\n      if(!input.contains(e.target)) {\r\n        resetFocus();\r\n      }\r\n    })\r\n\r\n    function resetFocus () {\r\n      let scrollTop = document.body.scrollTop;\r\n      let body = document.body;\r\n\r\n      let tmp = document.createElement('input');\r\n      tmp.style.opacity = 0;\r\n      body.appendChild(tmp);\r\n      tmp.focus();\r\n      body.removeChild(tmp);\r\n      body.scrollTop = scrollTop;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nspan {\r\n  width: 10px;\r\n  height: 10px;\r\n  text-align: center;\r\n  font-size: 0.7em;\r\n  color: rgb(106, 162, 247);\r\n}\r\nspan:hover {\r\n  cursor: pointer;\r\n}\r\n.width-input {\r\n  display: flex;\r\n  margin-left: 8px;\r\n}\r\n.width-input div {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\ninput {\r\n  width: 27px;\r\n  height: 18px;\r\n  background-color: rgb(94, 94, 94);\r\n  border: 0px solid black;\r\n  border-bottom: 2px solid rgb(106, 162, 247);\r\n  color: rgb(255, 255, 255);\r\n  font-family: Comfortaa;\r\n  text-align: center;\r\n}\r\ninput:hover {\r\n  background-color: rgb(112, 112, 112);\r\n}\r\n</style>"]}]}