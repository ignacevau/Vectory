{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolCircle.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolCircle.vue","mtime":1555179509698},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolCircle',\r\n  computed: {\r\n    ...mapState([\r\n      'ACTIVE',\r\n      'TOOLCIRCLE'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"pen\")\r\n\r\n      this.TOOLCIRCLE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var self = this;\r\n\r\n    var newPath;\r\n    var oldPath;\r\n    var middle;\r\n\r\n    self.TOOLCIRCLE.onMouseDown = function(e) {\r\n      newPath = new Path();\r\n\r\n      middle = e.point;\r\n\r\n      project.activeLayer.selected = false;        \r\n    }\r\n\r\n    self.TOOLCIRCLE.onMouseDrag = function(e) {\r\n      newPath.remove();\r\n\r\n      // Ellipse\r\n      if(!e.modifiers.shift) {\r\n        var rect;\r\n        if(!e.modifiers.control) {\r\n          var from = middle;\r\n          var to = e.point;\r\n          rect = new Rectangle(from, to);\r\n          newPath = Path.Ellipse(rect);\r\n        }\r\n        else {\r\n          var center = middle;\r\n          var rad = [e.point.x - middle.x, e.point.y - middle.y];\r\n          newPath = Path.Ellipse({\r\n            center: center,\r\n            radius: rad\r\n          });\r\n        }\r\n\r\n      }\r\n      // Circle\r\n      else {\r\n\r\n        var center;\r\n        var rad;\r\n\r\n        if(!e.modifiers.control) {\r\n          rad = Math.max(Math.abs(middle.x-e.point.x), Math.abs(middle.y-e.point.y))/2;\r\n          center = new Point(middle.x + (rad/2)*Math.sign(e.point.x-middle.x), middle.y + (rad/2)*Math.sign(e.point.y-middle.y));\r\n        }\r\n        else {\r\n          rad = middle.getDistance(e.point);\r\n          center = middle;\r\n        }\r\n        \r\n        newPath = Path.Circle(center, rad);\r\n      }\r\n\r\n      newPath.strokeColor = 'black';\r\n    }\r\n\r\n    self.TOOLCIRCLE.onMouseUp = function(e) {\r\n      // Don't create an object for a click\r\n      if (e.delta.length < 3) {\r\n          newPath.remove();\r\n          return;\r\n      }\r\n\r\n      newPath.selected = true;\r\n      oldPath = newPath;\r\n      newPath.selectable = true;\r\n\r\n      self.ADD_SELECT(newPath);\r\n      self.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ToolCircle.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ToolCircle.vue","sourceRoot":"src/components/tools","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-circle.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolCircle',\r\n  computed: {\r\n    ...mapState([\r\n      'ACTIVE',\r\n      'TOOLCIRCLE'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"pen\")\r\n\r\n      this.TOOLCIRCLE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    var self = this;\r\n\r\n    var newPath;\r\n    var oldPath;\r\n    var middle;\r\n\r\n    self.TOOLCIRCLE.onMouseDown = function(e) {\r\n      newPath = new Path();\r\n\r\n      middle = e.point;\r\n\r\n      project.activeLayer.selected = false;        \r\n    }\r\n\r\n    self.TOOLCIRCLE.onMouseDrag = function(e) {\r\n      newPath.remove();\r\n\r\n      // Ellipse\r\n      if(!e.modifiers.shift) {\r\n        var rect;\r\n        if(!e.modifiers.control) {\r\n          var from = middle;\r\n          var to = e.point;\r\n          rect = new Rectangle(from, to);\r\n          newPath = Path.Ellipse(rect);\r\n        }\r\n        else {\r\n          var center = middle;\r\n          var rad = [e.point.x - middle.x, e.point.y - middle.y];\r\n          newPath = Path.Ellipse({\r\n            center: center,\r\n            radius: rad\r\n          });\r\n        }\r\n\r\n      }\r\n      // Circle\r\n      else {\r\n\r\n        var center;\r\n        var rad;\r\n\r\n        if(!e.modifiers.control) {\r\n          rad = Math.max(Math.abs(middle.x-e.point.x), Math.abs(middle.y-e.point.y))/2;\r\n          center = new Point(middle.x + (rad/2)*Math.sign(e.point.x-middle.x), middle.y + (rad/2)*Math.sign(e.point.y-middle.y));\r\n        }\r\n        else {\r\n          rad = middle.getDistance(e.point);\r\n          center = middle;\r\n        }\r\n        \r\n        newPath = Path.Circle(center, rad);\r\n      }\r\n\r\n      newPath.strokeColor = 'black';\r\n    }\r\n\r\n    self.TOOLCIRCLE.onMouseUp = function(e) {\r\n      // Don't create an object for a click\r\n      if (e.delta.length < 3) {\r\n          newPath.remove();\r\n          return;\r\n      }\r\n\r\n      newPath.selected = true;\r\n      oldPath = newPath;\r\n      newPath.selectable = true;\r\n\r\n      self.ADD_SELECT(newPath);\r\n      self.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"]}]}