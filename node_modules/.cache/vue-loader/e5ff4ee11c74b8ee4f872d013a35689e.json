{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\ArtBoard.vue?vue&type=style&index=0&id=28f3d0f3&scoped=true&lang=css&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\ArtBoard.vue","mtime":1569687858777},{"path":"D:\\GitHub\\Vectory\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n.canvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  z-index: 0;\r\n}\r\n",{"version":3,"sources":["ArtBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuTA;AACA;AACA;AACA;AACA;AACA","file":"ArtBoard.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"art-board\">\r\n    <canvas id=\"canvas\" class=\"canvas\" resize></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport paper from \"paper\";\r\nimport { mapState, mapMutations } from \"vuex\";\r\nimport { bus } from \"@/main.js\";\r\nimport { get } from \"http\";\r\nimport Data from '@/Data.js'\r\n\r\nexport default {\r\n  name: \"ArtBoard\",\r\n  computed: {\r\n    ...mapState([\r\n      \"SELECTED_LAYER_INDEX\",\r\n      \"LAYERS\"\r\n      ])\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      \"SET_TOOLSELECT\",\r\n      \"SET_TOOLPOINTER\",\r\n      \"SET_TOOLPEN\",\r\n      \"SET_TOOLCIRCLE\",\r\n      \"SET_TOOLRECTANGLE\",\r\n      \"SET_TOOLSHAPEBUILDER\",\r\n      \"SET_TOOLLINE\",\r\n      \"DELETE_SHAPES\",\r\n      \"INSERT_LAYER\",\r\n      \"SET_SELECTED_LAYER_INDEX\",\r\n      \"SWAP_LAYERS\",\r\n      \"REFRESH_LAYER_ARRAY\"\r\n    ])\r\n  },\r\n  mounted: function() {\r\n    // Clamp prototype\r\n    Number.prototype.clamp = function(min, max) {\r\n      return Math.min(Math.max(this, min), max);\r\n    };\r\n\r\n    const canvas = document.querySelector(\"#canvas\");\r\n\r\n    //#region PaperJS setup\r\n    paper.install(window);\r\n    paper.setup(\"canvas\");\r\n\r\n    paper.settings.handleSize = 8;\r\n    paper.settings.hitTolerance = 7; /*value updated with zoom*/\r\n\r\n    const view = paper.view;\r\n\r\n    let border_w = Data.DOCUMENT_WIDTH;\r\n    let border_h = Data.DOCUMENT_HEIGHT;\r\n    const SCREEN_BORDER = Path.Rectangle({\r\n      point: [\r\n        Data.CENTER_HOR - border_w/2, \r\n        Data.CENTER_VER - border_h/2\r\n      ],\r\n      size: [border_w, border_h],\r\n      strokeColor: '#969696'\r\n    });\r\n    const UI_LAYER = project.addLayer(new Layer({\r\n      children: [SCREEN_BORDER]\r\n    }));\r\n\r\n    const toolSelect = new Tool();\r\n    const toolPointer = new Tool();\r\n    const toolPen = new Tool();\r\n    const toolCircle = new Tool();\r\n    const toolRectangle = new Tool();\r\n    const toolShapebuilder = new Tool();\r\n    const toolLine = new Tool();\r\n\r\n    // Set global store references\r\n    this.SET_TOOLSELECT(toolSelect);\r\n    this.SET_TOOLPOINTER(toolPointer);\r\n    this.SET_TOOLPEN(toolPen);\r\n    this.SET_TOOLCIRCLE(toolCircle);\r\n    this.SET_TOOLRECTANGLE(toolRectangle);\r\n    this.SET_TOOLSHAPEBUILDER(toolShapebuilder);\r\n    this.SET_TOOLLINE(toolLine);\r\n    //\r\n\r\n  //#region Layers\r\n\r\n    // Create default layer\r\n    let defaultLayer = project.addLayer(new Layer());\r\n    defaultLayer.number = 0;\r\n    defaultLayer.name = \"Default\";\r\n    defaultLayer.activate();\r\n\r\n    this.INSERT_LAYER(defaultLayer);\r\n\r\n    const layerLayout = {\r\n      0: defaultLayer\r\n    };\r\n\r\n    let layerCount = 1;\r\n\r\n    let AddLayer = () => {\r\n      let _newLayer = project.addLayer(new Layer());\r\n      _newLayer.number = layerCount;\r\n      _newLayer.name = \"Layer \" + layerCount;\r\n      layerLayout[layerCount] = _newLayer;\r\n      _newLayer.activate();\r\n      this.INSERT_LAYER(_newLayer);\r\n      layerCount++;\r\n    };\r\n\r\n    let RemoveLayer = (number) => {\r\n      for(let i=0; i<layerLayout[number].children.length; i++) {\r\n        layerLayout[number].children[i].selectable=false;\r\n      }\r\n\r\n      layerLayout[number].data.deleted = true;\r\n      layerLayout[number].remove();\r\n\r\n      this.SET_SELECTED_LAYER_INDEX(0);\r\n\r\n      this.REFRESH_LAYER_ARRAY();\r\n    };\r\n\r\n    let MergeLayers = (layers, bottom_index) => {\r\n      layers[bottom_index-1].addChildren(layers[bottom_index].children);\r\n      RemoveLayer(layers[bottom_index].number);\r\n    };\r\n\r\n    let UpdateActiveLayer = (number) => {\r\n      layerLayout[number].activate();\r\n      this.SET_SELECTED_LAYER_INDEX(number);\r\n    };\r\n\r\n    let getLayersFiltered = () => {\r\n      return this.LAYERS.filter(function(el) {\r\n        return !el.data.deleted;\r\n      });\r\n    }\r\n\r\n    bus.$on(\"add-layer\", () => {\r\n      AddLayer();\r\n    });\r\n    bus.$on(\"remove-layer\", () => {\r\n      RemoveLayer(this.SELECTED_LAYER_INDEX);\r\n    });\r\n    bus.$on(\"merge-layers\", () => {\r\n      let number = this.SELECTED_LAYER_INDEX;\r\n      let layersFiltered = getLayersFiltered();\r\n\r\n      for(let i=1; i<layersFiltered.length; i++) {\r\n        if(layersFiltered[i] == layerLayout[number]) {\r\n          MergeLayers(layersFiltered, i);\r\n        }\r\n      }\r\n    });\r\n    bus.$on(\"update-active-layer\", (number) => {\r\n      UpdateActiveLayer(number);\r\n    });\r\n    bus.$on('move-layer-up', (number) => {\r\n      let first_index = -1;\r\n      let second_index = -1;\r\n      for(let i=this.LAYERS.length-1; i >= 0; i--) {\r\n        if(first_index == -1) {\r\n          if(this.LAYERS[i] == layerLayout[number]) {\r\n            first_index = i;\r\n          }\r\n        }\r\n        else if(second_index == -1) {\r\n          // Valid layer and don't allow to move above default layer\r\n          if(!this.LAYERS[i].data.deleted && this.LAYERS[i].number != 0) {\r\n            second_index = i;\r\n          }\r\n        }\r\n      }\r\n\r\n      if(first_index != -1 && second_index != -1) {\r\n        this.SWAP_LAYERS({first_index, second_index});\r\n      }\r\n    });\r\n    bus.$on('move-layer-down', (number) => {\r\n      // Don't allow to move the default layer\r\n      if(number == 0)\r\n        return;\r\n      \r\n      let first_index = -1;\r\n      let second_index = -1;\r\n      for(let i=0; i < this.LAYERS.length; i++) {\r\n        if(first_index == -1) {\r\n          if(this.LAYERS[i] == layerLayout[number]) {\r\n            first_index = i;\r\n          }\r\n        }\r\n        else if(second_index == -1) {\r\n          if(!this.LAYERS[i].data.deleted) {\r\n            second_index = i;\r\n          }\r\n        }\r\n      }\r\n\r\n      if(first_index != -1 && second_index != -1) {\r\n        this.SWAP_LAYERS({first_index, second_index});\r\n      }\r\n    });\r\n    //\r\n\r\n    //#region Zoom\r\n    let zoomOffset = 0;\r\n\r\n    canvas.onwheel = function(e) {\r\n      bus.$emit(\"zoom\");\r\n      e.preventDefault();\r\n\r\n      const mousePos = new Point(e.clientX, e.clientY);\r\n      updateZoom(e.deltaY, mousePos);\r\n    };\r\n\r\n    function updateZoom(delta, mousePos) {\r\n      const mouseViewPos = view.viewToProject(mousePos);\r\n      [view.zoom, zoomOffset] = changeZoomStable(\r\n        view.zoom,\r\n        delta,\r\n        view.center,\r\n        mouseViewPos\r\n      );\r\n      view.center = view.center.add(zoomOffset);\r\n      view.draw();\r\n\r\n      // Pretty much hardcoded, this is to adjust the hitTolerance in respect to the zoom\r\n      settings.hitTolerance = (7 / view.zoom).clamp(0, 17);\r\n    }\r\n\r\n    function getNewZoom(oldZoom, delta) {\r\n      const factor = 1.05;\r\n\r\n      if (delta > 0) {\r\n        return oldZoom / factor;\r\n      } else if (delta < 0) {\r\n        return oldZoom * factor;\r\n      }\r\n    }\r\n\r\n    function changeZoomStable(oldZoom, delta, c, p) {\r\n      var newZoom = getNewZoom(oldZoom, delta).clamp(0.2, 10);\r\n      var beta = oldZoom / newZoom;\r\n      var pc = p.subtract(c);\r\n      var a = p.subtract(pc.multiply(beta)).subtract(c);\r\n\r\n      return [newZoom, a];\r\n    }\r\n    //\r\n\r\n    //#region Key-Handling\r\n    var keys = {\r\n      del: false,\r\n      shift: false,\r\n      control: false,\r\n      z: false\r\n    };\r\n\r\n    let keyHandler = e => {\r\n      if (!keys.del && e.code == \"Delete\" && !keys.control && !keys.shift) {\r\n        keys.del = true;\r\n        this.DELETE_SHAPES();\r\n\r\n        // Let other components know (ToolSelect -> transform box must disappear)\r\n        bus.$emit(\"delete_selection\");\r\n      } else if (!keys.shift && e.code == \"ShiftLeft\") {\r\n        keys.shift = true;\r\n        bus.$emit(\"shift\");\r\n      } else if (!keys.control && e.code == \"ControlLeft\") {\r\n        keys.control = true;\r\n        bus.$emit(\"control\");\r\n      } else if (!keys.z && e.key == \"z\") {\r\n        keys.z = true;\r\n      }\r\n\r\n      if (keys.z && keys.control) {\r\n        bus.$emit(\"undo\");\r\n      }\r\n    };\r\n\r\n    // --- Key checks ---\r\n    document.onkeydown = keyHandler;\r\n\r\n    document.onkeyup = function(e) {\r\n      if (e.code == \"ControlLeft\") {\r\n        bus.$emit(\"control_up\");\r\n      }\r\n\r\n      if (e.key == \"z\") {\r\n        keys.z = false;\r\n        return;\r\n      }\r\n      if (e.code == \"Delete\") {\r\n        keys.del = false;\r\n      }\r\n\r\n      keys.control = false;\r\n      keys.shift = false;\r\n      keys.del = false;\r\n      keys.z = false;\r\n    };\r\n    //\r\n  }\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.canvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  z-index: 0;\r\n}\r\n</style>\r\n"]}]}