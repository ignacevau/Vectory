{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\tools\\ToolRectangle.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\tools\\ToolRectangle.vue","mtime":1569073754256},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolRectangle',\r\n  computed: {\r\n    ...mapState([\r\n      'TOOLRECTANGLE',\r\n\r\n      'RECTANGLE_STROKECOLOR',\r\n      'RECTANGLE_FILLCOLOR',\r\n      'RECTANGLE_OPACITY',\r\n      'RECTANGLE_WIDTH'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"rectangle\")\r\n\r\n      this.TOOLRECTANGLE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    let newPath, oldPath, origin;\r\n\r\n    this.TOOLRECTANGLE.onMouseDown = (e) => {\r\n      this.CLEAR_SELECT();\r\n\r\n      newPath = new Path();\r\n\r\n      origin = e.point;\r\n\r\n      project.activeLayer.selected = false;        \r\n    }\r\n\r\n    this.TOOLRECTANGLE.onMouseDrag = (e) => {\r\n      newPath.remove();\r\n\r\n      let mousePos = e.point;\r\n      let rect;\r\n\r\n      // No shift modifier --> rectangle\r\n      if(!e.modifiers.shift) {\r\n        let from, to;\r\n\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          from = origin;\r\n          to = mousePos;\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if (e.modifiers.control) {\r\n          from = origin.multiply(2).subtract(mousePos);\r\n          to = mousePos;\r\n        }\r\n\r\n        rect = new Rectangle(from, to);\r\n      }\r\n      // Shift modifier --> square\r\n      else if (e.modifiers.shift) {\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          let dif_x = mousePos.x-origin.x;\r\n          let dif_y = mousePos.y-origin.y;\r\n          let size = Math.max(Math.abs(dif_x), Math.abs(dif_y));\r\n\r\n          rect = new Rectangle(origin, size*Math.sign(dif_x), size*Math.sign(dif_y));\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if(e.modifiers.control) {\r\n          let size = Math.max(Math.abs(origin.x-mousePos.x), Math.abs(origin.y-mousePos.y));\r\n\r\n          rect = new Rectangle(origin.subtract(size), origin.add(size));\r\n        }\r\n      }\r\n\r\n      newPath = Path.Rectangle(rect);\r\n\r\n      newPath.strokeColor = this.RECTANGLE_STROKECOLOR\r\n      newPath.fillColor = this.RECTANGLE_FILLCOLOR\r\n      newPath.opacity = this.RECTANGLE_OPACITY\r\n      newPath.strokeWidth = this.RECTANGLE_WIDTH\r\n    }\r\n\r\n    this.TOOLRECTANGLE.onMouseUp = (e) => {\r\n      // Don't create object for a click\r\n      if (e.delta.length < 3) {\r\n          newPath.remove();\r\n          return;\r\n      }\r\n\r\n      newPath.selected = true; \r\n      oldPath = newPath;\r\n      newPath.selectable = true;\r\n      newPath.type = \"shape\";\r\n\r\n      this.ADD_SELECT(newPath);\r\n      this.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ToolRectangle.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ToolRectangle.vue","sourceRoot":"src/components/tools","sourcesContent":["<template>\r\n  <tool imgSource=\"tool-rectangle.png\" @isActive=\"setActive\" />  \r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport Tool from '../Tool.vue'\r\nimport { mapMutations, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ToolRectangle',\r\n  computed: {\r\n    ...mapState([\r\n      'TOOLRECTANGLE',\r\n\r\n      'RECTANGLE_STROKECOLOR',\r\n      'RECTANGLE_FILLCOLOR',\r\n      'RECTANGLE_OPACITY',\r\n      'RECTANGLE_WIDTH'\r\n    ])\r\n  },\r\n  components: {\r\n    Tool\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_ACTIVE',\r\n      'ADD_SHAPE',\r\n      'ADD_SELECT',\r\n      'CLEAR_SELECT'\r\n    ]),\r\n    setActive: function() {\r\n      this.SET_ACTIVE(\"rectangle\")\r\n\r\n      this.TOOLRECTANGLE.activate();\r\n    }\r\n  },\r\n  mounted: function() {\r\n    let newPath, oldPath, origin;\r\n\r\n    this.TOOLRECTANGLE.onMouseDown = (e) => {\r\n      this.CLEAR_SELECT();\r\n\r\n      newPath = new Path();\r\n\r\n      origin = e.point;\r\n\r\n      project.activeLayer.selected = false;        \r\n    }\r\n\r\n    this.TOOLRECTANGLE.onMouseDrag = (e) => {\r\n      newPath.remove();\r\n\r\n      let mousePos = e.point;\r\n      let rect;\r\n\r\n      // No shift modifier --> rectangle\r\n      if(!e.modifiers.shift) {\r\n        let from, to;\r\n\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          from = origin;\r\n          to = mousePos;\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if (e.modifiers.control) {\r\n          from = origin.multiply(2).subtract(mousePos);\r\n          to = mousePos;\r\n        }\r\n\r\n        rect = new Rectangle(from, to);\r\n      }\r\n      // Shift modifier --> square\r\n      else if (e.modifiers.shift) {\r\n        // No control modifier --> scale from corner\r\n        if(!e.modifiers.control) {\r\n          let dif_x = mousePos.x-origin.x;\r\n          let dif_y = mousePos.y-origin.y;\r\n          let size = Math.max(Math.abs(dif_x), Math.abs(dif_y));\r\n\r\n          rect = new Rectangle(origin, size*Math.sign(dif_x), size*Math.sign(dif_y));\r\n        }\r\n        // Control modifier --> scale from center\r\n        else if(e.modifiers.control) {\r\n          let size = Math.max(Math.abs(origin.x-mousePos.x), Math.abs(origin.y-mousePos.y));\r\n\r\n          rect = new Rectangle(origin.subtract(size), origin.add(size));\r\n        }\r\n      }\r\n\r\n      newPath = Path.Rectangle(rect);\r\n\r\n      newPath.strokeColor = this.RECTANGLE_STROKECOLOR\r\n      newPath.fillColor = this.RECTANGLE_FILLCOLOR\r\n      newPath.opacity = this.RECTANGLE_OPACITY\r\n      newPath.strokeWidth = this.RECTANGLE_WIDTH\r\n    }\r\n\r\n    this.TOOLRECTANGLE.onMouseUp = (e) => {\r\n      // Don't create object for a click\r\n      if (e.delta.length < 3) {\r\n          newPath.remove();\r\n          return;\r\n      }\r\n\r\n      newPath.selected = true; \r\n      oldPath = newPath;\r\n      newPath.selectable = true;\r\n      newPath.type = \"shape\";\r\n\r\n      this.ADD_SELECT(newPath);\r\n      this.ADD_SHAPE(newPath);\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n</style>"]}]}