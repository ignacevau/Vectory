{"remainingRequest":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GitHub\\Vectory\\src\\components\\ArtBoard.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GitHub\\Vectory\\src\\components\\ArtBoard.vue","mtime":1555145463659},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GitHub\\Vectory\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\r\nimport paper from 'paper'\r\nimport { mapMutations } from 'vuex'\r\nimport { bus } from '@/main.js'\r\n\r\nexport default {\r\n  name: 'ArtBoard',\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_TOOLSELECT',\r\n      'SET_TOOLPOINTER',\r\n      'SET_TOOLPEN',\r\n      'SET_TOOLCIRCLE',\r\n      'DELETE_SELECT'\r\n    ])\r\n  },\r\n  mounted: function() {\r\n    // Setting up PaperJS and settings\r\n    Number.prototype.clamp = function(min, max) {\r\n      return Math.min(Math.max(this, min), max);\r\n    };\r\n\r\n    paper.install(window);\r\n    paper.setup('canvas');\r\n\r\n    settings.handleSize = 6;\r\n    // Value is not static (updated with zoom)\r\n    settings.hitTolerance = 7;\r\n\r\n    var self = this;\r\n\r\n    var toolSelect = new Tool();\r\n    var toolPointer = new Tool();\r\n    var toolPen = new Tool();\r\n    var toolCircle = new Tool();\r\n\r\n    self.SET_TOOLSELECT(toolSelect);\r\n    self.SET_TOOLPOINTER(toolPointer);\r\n    self.SET_TOOLPEN(toolPen);\r\n    self.SET_TOOLCIRCLE(toolCircle);\r\n\r\n    var view = paper.view;\r\n    var offset = 0\r\n    var canvas = document.querySelector('#canvas');\r\n\r\n\r\n\r\n\r\n\r\n    // --- Zoom ---\r\n\r\n    // Firefox\r\n    canvas.onwheel = function(e) {\r\n      bus.$emit('zoom');\r\n      e.preventDefault();\r\n\r\n      var mousePos = new Point(e.clientX, e.clientY);\r\n      updateZoom(e.deltaY, mousePos);\r\n    }\r\n\r\n    function updateZoom(delta, mousePos) {\r\n        var mouseViewPos = view.viewToProject(mousePos);\r\n        [view.zoom, offset] = changeZoomStable(view.zoom, delta, view.center, mouseViewPos);\r\n        view.center = view.center.add(offset);\r\n        view.draw();\r\n\r\n        // Pretty much hardcoded, this is to adjust the hitTolerance in respect to the zoom\r\n        settings.hitTolerance = (7 / (view.zoom)).clamp(0, 17);\r\n    }\r\n\r\n    function getNewZoom(oldZoom, delta) {\r\n        var factor = 1.05;\r\n\r\n        if (delta > 0) {\r\n            return oldZoom / factor;\r\n        }\r\n        else if (delta < 0) {\r\n            return oldZoom * factor;\r\n        }\r\n    }\r\n\r\n    function changeZoomStable(oldZoom, delta, c, p) {\r\n        var newZoom = getNewZoom(oldZoom, delta).clamp(0.2, 10);\r\n        var beta = oldZoom / newZoom;\r\n        var pc = p.subtract(c);\r\n        var a = p.subtract(pc.multiply(beta)).subtract(c);\r\n\r\n        return [newZoom, a];\r\n    }\r\n\r\n    var keys = {\r\n      del: false,\r\n      shift: false,\r\n      control: false,\r\n      z: false\r\n    }\r\n\r\n    function keyHandler(e) {\r\n      if(!keys.del && e.code == 'Delete' && !keys.control && !keys.shift) {\r\n        keys.del = true;\r\n        self.DELETE_SELECT();\r\n\r\n        // Let other components know (ToolSelect -> transform box must disappear)\r\n        bus.$emit('delete_selection');\r\n      }\r\n      else if(!keys.shift && e.code == 'ShiftLeft') {\r\n        keys.shift = true;\r\n        bus.$emit('shift');\r\n      }\r\n      else if(!keys.control && e.code == 'ControlLeft') {\r\n        keys.control = true;\r\n        bus.$emit('control');\r\n      }\r\n      else if(!keys.z && e.key == 'z') {\r\n        keys.z = true;\r\n      }\r\n\r\n      if(keys.z && keys.control) {\r\n        bus.$emit('undo');\r\n      }\r\n    };\r\n\r\n    // --- Key checks ---\r\n    document.onkeydown = keyHandler;\r\n\r\n    document.onkeyup = function(e) {\r\n      if(e.code == 'ControlLeft') {\r\n        bus.$emit('control_up');\r\n      }\r\n\r\n      if(e.key == 'z') {\r\n        keys.z = false;\r\n        return;\r\n      }\r\n      if(e.code == 'Delete') {\r\n        keys.del = false;\r\n      }\r\n      \r\n      keys.control = false;\r\n      keys.shift = false;\r\n      keys.del = false;\r\n      keys.z = false;\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["ArtBoard.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ArtBoard.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"art-board\">\r\n    <canvas id=\"canvas\" class=\"canvas\" resize></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport paper from 'paper'\r\nimport { mapMutations } from 'vuex'\r\nimport { bus } from '@/main.js'\r\n\r\nexport default {\r\n  name: 'ArtBoard',\r\n  methods: {\r\n    ...mapMutations([\r\n      'SET_TOOLSELECT',\r\n      'SET_TOOLPOINTER',\r\n      'SET_TOOLPEN',\r\n      'SET_TOOLCIRCLE',\r\n      'DELETE_SELECT'\r\n    ])\r\n  },\r\n  mounted: function() {\r\n    // Setting up PaperJS and settings\r\n    Number.prototype.clamp = function(min, max) {\r\n      return Math.min(Math.max(this, min), max);\r\n    };\r\n\r\n    paper.install(window);\r\n    paper.setup('canvas');\r\n\r\n    settings.handleSize = 6;\r\n    // Value is not static (updated with zoom)\r\n    settings.hitTolerance = 7;\r\n\r\n    var self = this;\r\n\r\n    var toolSelect = new Tool();\r\n    var toolPointer = new Tool();\r\n    var toolPen = new Tool();\r\n    var toolCircle = new Tool();\r\n\r\n    self.SET_TOOLSELECT(toolSelect);\r\n    self.SET_TOOLPOINTER(toolPointer);\r\n    self.SET_TOOLPEN(toolPen);\r\n    self.SET_TOOLCIRCLE(toolCircle);\r\n\r\n    var view = paper.view;\r\n    var offset = 0\r\n    var canvas = document.querySelector('#canvas');\r\n\r\n\r\n\r\n\r\n\r\n    // --- Zoom ---\r\n\r\n    // Firefox\r\n    canvas.onwheel = function(e) {\r\n      bus.$emit('zoom');\r\n      e.preventDefault();\r\n\r\n      var mousePos = new Point(e.clientX, e.clientY);\r\n      updateZoom(e.deltaY, mousePos);\r\n    }\r\n\r\n    function updateZoom(delta, mousePos) {\r\n        var mouseViewPos = view.viewToProject(mousePos);\r\n        [view.zoom, offset] = changeZoomStable(view.zoom, delta, view.center, mouseViewPos);\r\n        view.center = view.center.add(offset);\r\n        view.draw();\r\n\r\n        // Pretty much hardcoded, this is to adjust the hitTolerance in respect to the zoom\r\n        settings.hitTolerance = (7 / (view.zoom)).clamp(0, 17);\r\n    }\r\n\r\n    function getNewZoom(oldZoom, delta) {\r\n        var factor = 1.05;\r\n\r\n        if (delta > 0) {\r\n            return oldZoom / factor;\r\n        }\r\n        else if (delta < 0) {\r\n            return oldZoom * factor;\r\n        }\r\n    }\r\n\r\n    function changeZoomStable(oldZoom, delta, c, p) {\r\n        var newZoom = getNewZoom(oldZoom, delta).clamp(0.2, 10);\r\n        var beta = oldZoom / newZoom;\r\n        var pc = p.subtract(c);\r\n        var a = p.subtract(pc.multiply(beta)).subtract(c);\r\n\r\n        return [newZoom, a];\r\n    }\r\n\r\n    var keys = {\r\n      del: false,\r\n      shift: false,\r\n      control: false,\r\n      z: false\r\n    }\r\n\r\n    function keyHandler(e) {\r\n      if(!keys.del && e.code == 'Delete' && !keys.control && !keys.shift) {\r\n        keys.del = true;\r\n        self.DELETE_SELECT();\r\n\r\n        // Let other components know (ToolSelect -> transform box must disappear)\r\n        bus.$emit('delete_selection');\r\n      }\r\n      else if(!keys.shift && e.code == 'ShiftLeft') {\r\n        keys.shift = true;\r\n        bus.$emit('shift');\r\n      }\r\n      else if(!keys.control && e.code == 'ControlLeft') {\r\n        keys.control = true;\r\n        bus.$emit('control');\r\n      }\r\n      else if(!keys.z && e.key == 'z') {\r\n        keys.z = true;\r\n      }\r\n\r\n      if(keys.z && keys.control) {\r\n        bus.$emit('undo');\r\n      }\r\n    };\r\n\r\n    // --- Key checks ---\r\n    document.onkeydown = keyHandler;\r\n\r\n    document.onkeyup = function(e) {\r\n      if(e.code == 'ControlLeft') {\r\n        bus.$emit('control_up');\r\n      }\r\n\r\n      if(e.key == 'z') {\r\n        keys.z = false;\r\n        return;\r\n      }\r\n      if(e.code == 'Delete') {\r\n        keys.del = false;\r\n      }\r\n      \r\n      keys.control = false;\r\n      keys.shift = false;\r\n      keys.del = false;\r\n      keys.z = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.canvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  z-index: 0;\r\n}\r\n</style>\r\n"]}]}